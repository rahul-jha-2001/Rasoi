# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import Messages_pb2 as Messages__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in Messages_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class MessageServiceStub(object):
    """MessageService provides functionality for sending and managing messages
    Admin Services
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddMessageEvent = channel.unary_unary(
                '/messaging_v1.MessageService/AddMessageEvent',
                request_serializer=Messages__pb2.AddMessageEventRequest.SerializeToString,
                response_deserializer=Messages__pb2.AddMessageEventResponse.FromString,
                _registered_method=True)
        self.UpdateMessageEvent = channel.unary_unary(
                '/messaging_v1.MessageService/UpdateMessageEvent',
                request_serializer=Messages__pb2.UpdateMessageEventRequest.SerializeToString,
                response_deserializer=Messages__pb2.UpdateMessageEventResponse.FromString,
                _registered_method=True)
        self.RemoveMessageEvent = channel.unary_unary(
                '/messaging_v1.MessageService/RemoveMessageEvent',
                request_serializer=Messages__pb2.RemoveMessageEventRequest.SerializeToString,
                response_deserializer=Messages__pb2.RemoveMessageEventResponse.FromString,
                _registered_method=True)
        self.GetMessageEvent = channel.unary_unary(
                '/messaging_v1.MessageService/GetMessageEvent',
                request_serializer=Messages__pb2.GetMessageEventRequest.SerializeToString,
                response_deserializer=Messages__pb2.GetMessageEventResponse.FromString,
                _registered_method=True)
        self.ListMessageEvents = channel.unary_unary(
                '/messaging_v1.MessageService/ListMessageEvents',
                request_serializer=Messages__pb2.ListMessageEventRequest.SerializeToString,
                response_deserializer=Messages__pb2.ListMessageEventResponse.FromString,
                _registered_method=True)
        self.GetMessage = channel.unary_unary(
                '/messaging_v1.MessageService/GetMessage',
                request_serializer=Messages__pb2.GetMessageRequest.SerializeToString,
                response_deserializer=Messages__pb2.GetMessageResponse.FromString,
                _registered_method=True)
        self.DeleteMessage = channel.unary_unary(
                '/messaging_v1.MessageService/DeleteMessage',
                request_serializer=Messages__pb2.DeleteMessageRequest.SerializeToString,
                response_deserializer=Messages__pb2.DeleteMessageResponse.FromString,
                _registered_method=True)
        self.ListMessages = channel.unary_unary(
                '/messaging_v1.MessageService/ListMessages',
                request_serializer=Messages__pb2.ListMessageRequest.SerializeToString,
                response_deserializer=Messages__pb2.ListMessageResponse.FromString,
                _registered_method=True)


class MessageServiceServicer(object):
    """MessageService provides functionality for sending and managing messages
    Admin Services
    """

    def AddMessageEvent(self, request, context):
        """AddMessageEvent creates a new message in the system
        Returns the created message or error if creation fails
        Errors:
        - INVALID_ARGUMENT: If the message event is malformed
        - ALREADY_EXISTS: If a duplicate message is detected
        - INSUFFICIENT_CREDITS: If account lacks credits
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateMessageEvent(self, request, context):
        """UpdateMessageEvent modifies an existing message
        Only allows updates to certain fields (e.g., status, variables)
        Errors:
        - NOT_FOUND: If message doesn't exist
        - INVALID_STATE: If message is already sent
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveMessageEvent(self, request, context):
        """RemoveMessageEvent deletes a message from the system
        Only pending messages can be removed
        Errors:
        - NOT_FOUND: If message doesn't exist
        - INVALID_STATE: If message is already sent
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMessageEvent(self, request, context):
        """GetMessageEvent retrieves detailed information about a specific message
        Errors:
        - NOT_FOUND: If message doesn't exist
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListMessageEvents(self, request, context):
        """ListMessageEvents retrieves a paginated list of messages
        filtered by the provided criteria
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMessage(self, request, context):
        """Client Services

        GetMessage retrieves a simplified view of a message
        Suitable for client applications
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteMessage(self, request, context):
        """DeleteMessage removes a message (client version)
        Only allows deletion of user's own messages
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListMessages(self, request, context):
        """ListMessages retrieves a paginated list of messages (client version)
        Only returns messages relevant to the requesting user
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MessageServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddMessageEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.AddMessageEvent,
                    request_deserializer=Messages__pb2.AddMessageEventRequest.FromString,
                    response_serializer=Messages__pb2.AddMessageEventResponse.SerializeToString,
            ),
            'UpdateMessageEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateMessageEvent,
                    request_deserializer=Messages__pb2.UpdateMessageEventRequest.FromString,
                    response_serializer=Messages__pb2.UpdateMessageEventResponse.SerializeToString,
            ),
            'RemoveMessageEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveMessageEvent,
                    request_deserializer=Messages__pb2.RemoveMessageEventRequest.FromString,
                    response_serializer=Messages__pb2.RemoveMessageEventResponse.SerializeToString,
            ),
            'GetMessageEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMessageEvent,
                    request_deserializer=Messages__pb2.GetMessageEventRequest.FromString,
                    response_serializer=Messages__pb2.GetMessageEventResponse.SerializeToString,
            ),
            'ListMessageEvents': grpc.unary_unary_rpc_method_handler(
                    servicer.ListMessageEvents,
                    request_deserializer=Messages__pb2.ListMessageEventRequest.FromString,
                    response_serializer=Messages__pb2.ListMessageEventResponse.SerializeToString,
            ),
            'GetMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMessage,
                    request_deserializer=Messages__pb2.GetMessageRequest.FromString,
                    response_serializer=Messages__pb2.GetMessageResponse.SerializeToString,
            ),
            'DeleteMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteMessage,
                    request_deserializer=Messages__pb2.DeleteMessageRequest.FromString,
                    response_serializer=Messages__pb2.DeleteMessageResponse.SerializeToString,
            ),
            'ListMessages': grpc.unary_unary_rpc_method_handler(
                    servicer.ListMessages,
                    request_deserializer=Messages__pb2.ListMessageRequest.FromString,
                    response_serializer=Messages__pb2.ListMessageResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'messaging_v1.MessageService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('messaging_v1.MessageService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MessageService(object):
    """MessageService provides functionality for sending and managing messages
    Admin Services
    """

    @staticmethod
    def AddMessageEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/messaging_v1.MessageService/AddMessageEvent',
            Messages__pb2.AddMessageEventRequest.SerializeToString,
            Messages__pb2.AddMessageEventResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateMessageEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/messaging_v1.MessageService/UpdateMessageEvent',
            Messages__pb2.UpdateMessageEventRequest.SerializeToString,
            Messages__pb2.UpdateMessageEventResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemoveMessageEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/messaging_v1.MessageService/RemoveMessageEvent',
            Messages__pb2.RemoveMessageEventRequest.SerializeToString,
            Messages__pb2.RemoveMessageEventResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMessageEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/messaging_v1.MessageService/GetMessageEvent',
            Messages__pb2.GetMessageEventRequest.SerializeToString,
            Messages__pb2.GetMessageEventResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListMessageEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/messaging_v1.MessageService/ListMessageEvents',
            Messages__pb2.ListMessageEventRequest.SerializeToString,
            Messages__pb2.ListMessageEventResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/messaging_v1.MessageService/GetMessage',
            Messages__pb2.GetMessageRequest.SerializeToString,
            Messages__pb2.GetMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/messaging_v1.MessageService/DeleteMessage',
            Messages__pb2.DeleteMessageRequest.SerializeToString,
            Messages__pb2.DeleteMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/messaging_v1.MessageService/ListMessages',
            Messages__pb2.ListMessageRequest.SerializeToString,
            Messages__pb2.ListMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
