# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import order_pb2 as order__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in order_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class OrderServiceStub(object):
    """User Flow 
    1. User creates a cart
    2. user Checkout the cart
    3. Cart_uuid is snet to the Paymment Service 
    4. Payment servic calls the cart and validates and locks the cart
    5. Payment servic sends mess to order service with the cart_uuid 
    6. Order service Validates the cart and creates the order

    Store Flow
    2. store creates a cart
    3. store adds items to the cart
    4. store checks out the cart
    5. store Calls order sevice with cart_uuid
    6. Order service validates the cart and creates the order

    or 

    Store Flow
    2. store creates a cart
    3. store adds items to the cart
    4. store checks out the cart
    5. store Calls payment_service with cart_uuid and payment_method as cash
    6. Payment service validates the cart and creates the order
    7. Payment service sends message to order service with the cart_uuid
    8. Order service validates the cart and creates the order

    Service Definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateOrder = channel.unary_unary(
                '/Order_v1.OrderService/CreateOrder',
                request_serializer=order__pb2.CreateOrderRequest.SerializeToString,
                response_deserializer=order__pb2.StoreOrderResponse.FromString,
                _registered_method=True)
        self.GetOrder = channel.unary_unary(
                '/Order_v1.OrderService/GetOrder',
                request_serializer=order__pb2.GetOrderRequest.SerializeToString,
                response_deserializer=order__pb2.StoreOrderResponse.FromString,
                _registered_method=True)
        self.CancelOrder = channel.unary_unary(
                '/Order_v1.OrderService/CancelOrder',
                request_serializer=order__pb2.CancelOrderRequest.SerializeToString,
                response_deserializer=order__pb2.StoreOrderResponse.FromString,
                _registered_method=True)
        self.ListOrder = channel.unary_unary(
                '/Order_v1.OrderService/ListOrder',
                request_serializer=order__pb2.ListStoreOrderRequest.SerializeToString,
                response_deserializer=order__pb2.ListStoreOrderResponse.FromString,
                _registered_method=True)
        self.StreamOrders = channel.unary_stream(
                '/Order_v1.OrderService/StreamOrders',
                request_serializer=order__pb2.StreamOrderRequest.SerializeToString,
                response_deserializer=order__pb2.StoreOrderResponse.FromString,
                _registered_method=True)
        self.UpdateOrderState = channel.unary_unary(
                '/Order_v1.OrderService/UpdateOrderState',
                request_serializer=order__pb2.UpdateOrderStateRequest.SerializeToString,
                response_deserializer=order__pb2.StoreOrderResponse.FromString,
                _registered_method=True)
        self.GetUserOrder = channel.unary_unary(
                '/Order_v1.OrderService/GetUserOrder',
                request_serializer=order__pb2.GetUserOrderRequest.SerializeToString,
                response_deserializer=order__pb2.UserOrderResponse.FromString,
                _registered_method=True)
        self.listUserOrder = channel.unary_unary(
                '/Order_v1.OrderService/listUserOrder',
                request_serializer=order__pb2.ListUserOrderRequest.SerializeToString,
                response_deserializer=order__pb2.ListUserOrderResponse.FromString,
                _registered_method=True)
        self.CancelUserOrder = channel.unary_unary(
                '/Order_v1.OrderService/CancelUserOrder',
                request_serializer=order__pb2.CancelUserOrderRequest.SerializeToString,
                response_deserializer=order__pb2.UserOrderResponse.FromString,
                _registered_method=True)


class OrderServiceServicer(object):
    """User Flow 
    1. User creates a cart
    2. user Checkout the cart
    3. Cart_uuid is snet to the Paymment Service 
    4. Payment servic calls the cart and validates and locks the cart
    5. Payment servic sends mess to order service with the cart_uuid 
    6. Order service Validates the cart and creates the order

    Store Flow
    2. store creates a cart
    3. store adds items to the cart
    4. store checks out the cart
    5. store Calls order sevice with cart_uuid
    6. Order service validates the cart and creates the order

    or 

    Store Flow
    2. store creates a cart
    3. store adds items to the cart
    4. store checks out the cart
    5. store Calls payment_service with cart_uuid and payment_method as cash
    6. Payment service validates the cart and creates the order
    7. Payment service sends message to order service with the cart_uuid
    8. Order service validates the cart and creates the order

    Service Definition
    """

    def CreateOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamOrders(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateOrderState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUserOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listUserOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelUserOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OrderServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateOrder,
                    request_deserializer=order__pb2.CreateOrderRequest.FromString,
                    response_serializer=order__pb2.StoreOrderResponse.SerializeToString,
            ),
            'GetOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOrder,
                    request_deserializer=order__pb2.GetOrderRequest.FromString,
                    response_serializer=order__pb2.StoreOrderResponse.SerializeToString,
            ),
            'CancelOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelOrder,
                    request_deserializer=order__pb2.CancelOrderRequest.FromString,
                    response_serializer=order__pb2.StoreOrderResponse.SerializeToString,
            ),
            'ListOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.ListOrder,
                    request_deserializer=order__pb2.ListStoreOrderRequest.FromString,
                    response_serializer=order__pb2.ListStoreOrderResponse.SerializeToString,
            ),
            'StreamOrders': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamOrders,
                    request_deserializer=order__pb2.StreamOrderRequest.FromString,
                    response_serializer=order__pb2.StoreOrderResponse.SerializeToString,
            ),
            'UpdateOrderState': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateOrderState,
                    request_deserializer=order__pb2.UpdateOrderStateRequest.FromString,
                    response_serializer=order__pb2.StoreOrderResponse.SerializeToString,
            ),
            'GetUserOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUserOrder,
                    request_deserializer=order__pb2.GetUserOrderRequest.FromString,
                    response_serializer=order__pb2.UserOrderResponse.SerializeToString,
            ),
            'listUserOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.listUserOrder,
                    request_deserializer=order__pb2.ListUserOrderRequest.FromString,
                    response_serializer=order__pb2.ListUserOrderResponse.SerializeToString,
            ),
            'CancelUserOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelUserOrder,
                    request_deserializer=order__pb2.CancelUserOrderRequest.FromString,
                    response_serializer=order__pb2.UserOrderResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Order_v1.OrderService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('Order_v1.OrderService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class OrderService(object):
    """User Flow 
    1. User creates a cart
    2. user Checkout the cart
    3. Cart_uuid is snet to the Paymment Service 
    4. Payment servic calls the cart and validates and locks the cart
    5. Payment servic sends mess to order service with the cart_uuid 
    6. Order service Validates the cart and creates the order

    Store Flow
    2. store creates a cart
    3. store adds items to the cart
    4. store checks out the cart
    5. store Calls order sevice with cart_uuid
    6. Order service validates the cart and creates the order

    or 

    Store Flow
    2. store creates a cart
    3. store adds items to the cart
    4. store checks out the cart
    5. store Calls payment_service with cart_uuid and payment_method as cash
    6. Payment service validates the cart and creates the order
    7. Payment service sends message to order service with the cart_uuid
    8. Order service validates the cart and creates the order

    Service Definition
    """

    @staticmethod
    def CreateOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Order_v1.OrderService/CreateOrder',
            order__pb2.CreateOrderRequest.SerializeToString,
            order__pb2.StoreOrderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Order_v1.OrderService/GetOrder',
            order__pb2.GetOrderRequest.SerializeToString,
            order__pb2.StoreOrderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CancelOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Order_v1.OrderService/CancelOrder',
            order__pb2.CancelOrderRequest.SerializeToString,
            order__pb2.StoreOrderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Order_v1.OrderService/ListOrder',
            order__pb2.ListStoreOrderRequest.SerializeToString,
            order__pb2.ListStoreOrderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamOrders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/Order_v1.OrderService/StreamOrders',
            order__pb2.StreamOrderRequest.SerializeToString,
            order__pb2.StoreOrderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateOrderState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Order_v1.OrderService/UpdateOrderState',
            order__pb2.UpdateOrderStateRequest.SerializeToString,
            order__pb2.StoreOrderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUserOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Order_v1.OrderService/GetUserOrder',
            order__pb2.GetUserOrderRequest.SerializeToString,
            order__pb2.UserOrderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def listUserOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Order_v1.OrderService/listUserOrder',
            order__pb2.ListUserOrderRequest.SerializeToString,
            order__pb2.ListUserOrderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CancelUserOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Order_v1.OrderService/CancelUserOrder',
            order__pb2.CancelUserOrderRequest.SerializeToString,
            order__pb2.UserOrderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
