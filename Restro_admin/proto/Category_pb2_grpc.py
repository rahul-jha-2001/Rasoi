# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import Category_pb2 as Category__pb2

GRPC_GENERATED_VERSION = '1.66.2'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in Category_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class CategoryServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateCategory = channel.unary_unary(
                '/category.CategoryService/CreateCategory',
                request_serializer=Category__pb2.CreateCategoryRequest.SerializeToString,
                response_deserializer=Category__pb2.CategoryResponse.FromString,
                _registered_method=True)
        self.GetCategory = channel.unary_unary(
                '/category.CategoryService/GetCategory',
                request_serializer=Category__pb2.GetCategoryRequest.SerializeToString,
                response_deserializer=Category__pb2.CategoryResponse.FromString,
                _registered_method=True)
        self.UpdateCategory = channel.unary_unary(
                '/category.CategoryService/UpdateCategory',
                request_serializer=Category__pb2.UpdateCategoryRequest.SerializeToString,
                response_deserializer=Category__pb2.CategoryResponse.FromString,
                _registered_method=True)
        self.DeleteCategory = channel.unary_unary(
                '/category.CategoryService/DeleteCategory',
                request_serializer=Category__pb2.DeleteCategoryRequest.SerializeToString,
                response_deserializer=Category__pb2.DeleteCategoryResponse.FromString,
                _registered_method=True)
        self.ListCategories = channel.unary_unary(
                '/category.CategoryService/ListCategories',
                request_serializer=Category__pb2.ListCategoriesRequest.SerializeToString,
                response_deserializer=Category__pb2.ListCategoriesResponse.FromString,
                _registered_method=True)


class CategoryServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateCategory(self, request, context):
        """Create a new category
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCategory(self, request, context):
        """Get a category by its UUID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateCategory(self, request, context):
        """Update a category
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteCategory(self, request, context):
        """Delete a category by its UUID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListCategories(self, request, context):
        """List all categories by store
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CategoryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateCategory': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateCategory,
                    request_deserializer=Category__pb2.CreateCategoryRequest.FromString,
                    response_serializer=Category__pb2.CategoryResponse.SerializeToString,
            ),
            'GetCategory': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCategory,
                    request_deserializer=Category__pb2.GetCategoryRequest.FromString,
                    response_serializer=Category__pb2.CategoryResponse.SerializeToString,
            ),
            'UpdateCategory': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateCategory,
                    request_deserializer=Category__pb2.UpdateCategoryRequest.FromString,
                    response_serializer=Category__pb2.CategoryResponse.SerializeToString,
            ),
            'DeleteCategory': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteCategory,
                    request_deserializer=Category__pb2.DeleteCategoryRequest.FromString,
                    response_serializer=Category__pb2.DeleteCategoryResponse.SerializeToString,
            ),
            'ListCategories': grpc.unary_unary_rpc_method_handler(
                    servicer.ListCategories,
                    request_deserializer=Category__pb2.ListCategoriesRequest.FromString,
                    response_serializer=Category__pb2.ListCategoriesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'category.CategoryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('category.CategoryService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CategoryService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateCategory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/category.CategoryService/CreateCategory',
            Category__pb2.CreateCategoryRequest.SerializeToString,
            Category__pb2.CategoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCategory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/category.CategoryService/GetCategory',
            Category__pb2.GetCategoryRequest.SerializeToString,
            Category__pb2.CategoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateCategory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/category.CategoryService/UpdateCategory',
            Category__pb2.UpdateCategoryRequest.SerializeToString,
            Category__pb2.CategoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteCategory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/category.CategoryService/DeleteCategory',
            Category__pb2.DeleteCategoryRequest.SerializeToString,
            Category__pb2.DeleteCategoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListCategories(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/category.CategoryService/ListCategories',
            Category__pb2.ListCategoriesRequest.SerializeToString,
            Category__pb2.ListCategoriesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
