
version: '3.8'
services:
    product_grpc:
        build:
            context: ./  
            dockerfile: product.dockerfile
        container_name: product_grpc    
        ports:
            - "50052:50051"
        healthcheck:
            test: ["CMD-SHELL", "supervisorctl status | grep -q 'RUNNING' || exit 1"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s
        restart: unless-stopped                     
        networks:
            backend:
                ipv4_address : 10.10.10.2
        env_file:
            - Product\.env       
    cart_grpc:
        build:
            context: ./
            dockerfile: cart.dockerfile
        container_name: cart_grpc
        ports:
            - "50053:50051"
        healthcheck:
            test: ["CMD-SHELL", "supervisorctl status | grep -q 'RUNNING' || exit 1"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s
        restart: unless-stopped
        networks:
            backend:
                ipv4_address : 10.10.10.6
        env_file:
            - Cart\.env
    user_grpc:
        build:
            context: ./
            dockerfile: userauth.dockerfile
        container_name: user_grpc
        ports:
            - "50054:50051"
        # depends_on:
        #     - redis
        healthcheck:
            test: ["CMD-SHELL", "supervisorctl status | grep -q 'RUNNING' || exit 1"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s
        restart: unless-stopped
        networks:
            backend:
                ipv4_address : 10.10.10.14
        env_file:
            - UserAuth\.env            

    order_kafka:
        build:
            context: ./
            dockerfile: order_kafka.dockerfile
        container_name: order_kafka
        depends_on:
            kafka:
                condition: service_healthy
            cart_grpc:
                condition: service_healthy
        healthcheck:
            test: ["CMD-SHELL", "supervisorctl status | grep -q 'RUNNING' || exit 1"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s
        restart: unless-stopped
        networks:
            backend:
                ipv4_address: 10.10.10.8
        env_file:
            - Orders\.env
    order_grpc:
        build:
            context: ./
            dockerfile: order_grpc.dockerfile
        container_name: order_grpc
        ports:
            - "50055:50051"
        depends_on:
            cart_grpc:
                condition: service_healthy
        healthcheck:
            test: ["CMD-SHELL", "supervisorctl status | grep -q 'RUNNING' || exit 1"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s
        restart: unless-stopped
        networks:
            backend:
                ipv4_address: 10.10.10.12
        env_file:
            - Orders\.env    

    notifications_kafka:
        build:
            context: ./
            dockerfile: notifications_kafka.dockerfile
        container_name: notifications_kafka
        depends_on:
            kafka:
                condition: service_healthy
        healthcheck:
            test: ["CMD-SHELL", "supervisorctl status | grep -q 'RUNNING' || exit 1"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s
        restart: unless-stopped
        networks:
            backend:
                ipv4_address: 10.10.10.13
        env_file:
            - Notifications\.env
    notifications_grpc:
        build:
            context: ./
            dockerfile: notifications_grpc.dockerfile
        container_name: notifications_grpc
        ports:
            - "50056:50051"
        depends_on:
            kafka:
                condition: service_healthy
        healthcheck:
            test: ["CMD-SHELL", "supervisorctl status | grep -q 'RUNNING' || exit 1"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 40s
        restart: unless-stopped
        networks:
            backend:
                ipv4_address: 10.10.10.14
        env_file:
            - Notifications\.env    
   
   
    # product-database:
    #     image: postgres:latest
    #     container_name: product_db
    #     ports:
    #         - "5434:5432"
    #     volumes:
    #         - product_db_data:/var/lib/postgresql/data
    #     healthcheck:               # Adding healthcheck for database
    #         test: ["CMD-SHELL", "pg_isready -U postgres"]
    #         interval: 10s
    #         timeout: 5s
    #         retries: 5
    #     restart: unless-stopped                     
    #     networks:
    #         backend:
    #             ipv4_address : 10.10.10.3  
    
    # cart-database:
    #     image: postgres:latest
    #     container_name: cart_database
    #     ports:
    #         - "5435:5432"
    #     volumes:
    #         - cart_db_data:/var/lib/postgresql/data
    #     healthcheck:               # Adding healthcheck for database
    #         test: ["CMD-SHELL", "pg_isready -U postgres"]
    #         interval: 10s
    #         timeout: 5s
    #         retries: 5
    #     networks:
    #         backend:
    #             ipv4_address : 10.10.10.7
    #     restart: unless-stopped
   
    # user-database:
    #     image: postgres:latest
    #     container_name: user_database
    #     ports:
    #         - "5436:5432"
    #     volumes:
    #         - user_db_data:/var/lib/postgresql/data
    #     environment:            #Enviroment varible 
    #         POSTGRES_USER: postgres
    #         POSTGRES_PASSWORD: postgres
    #         POSTGRES_DB: User
    #     healthcheck:               # Adding healthcheck for database
    #         test: ["CMD-SHELL", "pg_isready -U postgres"]
    #         interval: 10s
    #         timeout: 5s
    #         retries: 5
    #     networks:
    #         backend:
    #             ipv4_address : 10.10.10.5
    #     restart: unless-stopped                     

    # order-database:
    #     image: postgres:latest
    #     container_name: order_database
    #     ports:
    #         - "5437:5432"
    #     volumes:
    #         - order_db_data:/var/lib/postgresql/data
    #     environment:            #Enviroment varible 
    #         POSTGRES_USER: postgres
    #         POSTGRES_PASSWORD: postgres
    #         POSTGRES_DB: order
    #     healthcheck:               # Adding healthcheck for database
    #         test: ["CMD-SHELL", "pg_isready -U postgres"]
    #         interval: 10s
    #         timeout: 5s
    #         retries: 5
    #     networks:
    #         backend:
    #             ipv4_address : 10.10.10.9
    #     restart: unless-stopped                     

    # notifications-database:
    #     image: postgres:latest
    #     container_name: notifications_database
    #     ports:
    #         - "5436:5432"
    #     volumes:
    #         - notifications_db_data:/var/lib/postgresql/data
    #     env_file:
    #         - ./env/notifications.env
    #     healthcheck:
    #         test: ["CMD-SHELL", "pg_isready -U postgres"]
    #         interval: 10s
    #         timeout: 5s
    #         retries: 5
    #     networks:
    #         backend:
    #             ipv4_address : 10.10.10.16
    #     restart: unless-stopped

    zookeeper:
        image: confluentinc/cp-zookeeper:7.5.1
        hostname: zookeeper
        container_name: zookeeper
        networks:
            backend:
                ipv4_address: 10.10.10.11
        ports:
            - "2181:2181"
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000
            ZOOKEEPER_INIT_LIMIT: 5
            ZOOKEEPER_SYNC_LIMIT: 2
        healthcheck:
            test: ["CMD-SHELL", "echo ruok | nc localhost 2181 | grep imok"]
            interval: 10s
            timeout: 5s
            retries: 3
            start_period: 30s
    
    kafka:
        image: confluentinc/cp-kafka:7.5.1
        hostname: kafka
        container_name: kafka
        depends_on:
            - zookeeper
        ports:
            - "29092:29092"
            - "9092:9092"
            - "9101:9101"
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
            KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
            KAFKA_JMX_PORT: 9101
            KAFKA_JMX_HOSTNAME: localhost
        healthcheck:
            test: ["CMD-SHELL", "kafka-topics --bootstrap-server=localhost:9092 --list"]
            interval: 30s
            timeout: 10s
            retries: 3
            start_period: 30s    
        networks:
            backend:
                ipv4_address: 10.10.10.10
    
    redis:
        image: redis:latest
        container_name: redis
        ports:
            - "6379:6379"
        volumes:
            - redis_data:/data
        command: ["redis-server", "--requirepass", "Temp_Pass"]
        healthcheck:
            test: ["CMD", "redis-cli", "-a", "Temp_Pass", "ping"]
            interval: 30s
            timeout: 10s
            retries: 3
        restart: unless-stopped
        networks:
            backend:
                ipv4_address : 10.10.10.15

    gateway:
        build:
            context: ./
            dockerfile: api_gateway.dockerfile
        container_name: gateway
        ports:
          - "8090:8090"                 
        networks:
            backend:
                ipv4_address : 10.10.10.20
        env_file:
            - grpc_gateway\.env

networks:
    backend:
        driver: bridge
        ipam:
            config:
            - subnet: 10.10.10.0/24
              gateway: 10.10.10.1

volumes:
    product_db_data: 
    restro_db_data: 
    cart_db_data:
    order_db_data:
    user_db_data:
    redis_data:
    notifications_db_data: