// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: cart.proto

package cart

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CartService_CreateCart_FullMethodName            = "/Cart_v1.CartService/CreateCart"
	CartService_GetCart_FullMethodName               = "/Cart_v1.CartService/GetCart"
	CartService_UpdateCart_FullMethodName            = "/Cart_v1.CartService/UpdateCart"
	CartService_DeleteCart_FullMethodName            = "/Cart_v1.CartService/DeleteCart"
	CartService_AddCartItem_FullMethodName           = "/Cart_v1.CartService/AddCartItem"
	CartService_RemoveCartItem_FullMethodName        = "/Cart_v1.CartService/RemoveCartItem"
	CartService_AddQuantity_FullMethodName           = "/Cart_v1.CartService/AddQuantity"
	CartService_RemoveQuantity_FullMethodName        = "/Cart_v1.CartService/RemoveQuantity"
	CartService_CreateAddOn_FullMethodName           = "/Cart_v1.CartService/CreateAddOn"
	CartService_UpdateAddOn_FullMethodName           = "/Cart_v1.CartService/UpdateAddOn"
	CartService_RemoveAddOn_FullMethodName           = "/Cart_v1.CartService/RemoveAddOn"
	CartService_IncreaseAddOnQuantity_FullMethodName = "/Cart_v1.CartService/IncreaseAddOnQuantity"
	CartService_RemoveAddOnQuantity_FullMethodName   = "/Cart_v1.CartService/RemoveAddOnQuantity"
	CartService_ValidateCoupon_FullMethodName        = "/Cart_v1.CartService/ValidateCoupon"
	CartService_AddCoupon_FullMethodName             = "/Cart_v1.CartService/AddCoupon"
	CartService_RemoveCoupon_FullMethodName          = "/Cart_v1.CartService/RemoveCoupon"
	CartService_ValidateCart_FullMethodName          = "/Cart_v1.CartService/ValidateCart"
)

// CartServiceClient is the client API for CartService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CartServiceClient interface {
	// Core Cart Service
	CreateCart(ctx context.Context, in *CreateCartRequest, opts ...grpc.CallOption) (*CartResponse, error)
	GetCart(ctx context.Context, in *GetCartRequest, opts ...grpc.CallOption) (*CartResponse, error)
	UpdateCart(ctx context.Context, in *UpdateCartRequest, opts ...grpc.CallOption) (*CartResponse, error)
	DeleteCart(ctx context.Context, in *DeleteCartRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Cart item Service
	AddCartItem(ctx context.Context, in *AddCartItemRequest, opts ...grpc.CallOption) (*CartResponse, error)
	RemoveCartItem(ctx context.Context, in *RemoveCartItemRequest, opts ...grpc.CallOption) (*CartResponse, error)
	AddQuantity(ctx context.Context, in *AddQuantityRequest, opts ...grpc.CallOption) (*CartResponse, error)
	RemoveQuantity(ctx context.Context, in *RemoveQuantityRequest, opts ...grpc.CallOption) (*CartResponse, error)
	CreateAddOn(ctx context.Context, in *CreateAddOnRequest, opts ...grpc.CallOption) (*CartResponse, error)
	UpdateAddOn(ctx context.Context, in *UpdateAddOnRequest, opts ...grpc.CallOption) (*CartResponse, error)
	RemoveAddOn(ctx context.Context, in *RemoveAddOnRequest, opts ...grpc.CallOption) (*CartResponse, error)
	IncreaseAddOnQuantity(ctx context.Context, in *IncreaseAddOnQuantityRequest, opts ...grpc.CallOption) (*CartResponse, error)
	RemoveAddOnQuantity(ctx context.Context, in *RemoveAddOnQuantityRequest, opts ...grpc.CallOption) (*CartResponse, error)
	ValidateCoupon(ctx context.Context, in *ValidCouponResquest, opts ...grpc.CallOption) (*ValidCouponResponse, error)
	AddCoupon(ctx context.Context, in *AddCouponRequest, opts ...grpc.CallOption) (*CartResponse, error)
	RemoveCoupon(ctx context.Context, in *RemoveCouponRequest, opts ...grpc.CallOption) (*CartResponse, error)
	ValidateCart(ctx context.Context, in *ValidateCartRequest, opts ...grpc.CallOption) (*CartResponse, error)
}

type cartServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCartServiceClient(cc grpc.ClientConnInterface) CartServiceClient {
	return &cartServiceClient{cc}
}

func (c *cartServiceClient) CreateCart(ctx context.Context, in *CreateCartRequest, opts ...grpc.CallOption) (*CartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CartResponse)
	err := c.cc.Invoke(ctx, CartService_CreateCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) GetCart(ctx context.Context, in *GetCartRequest, opts ...grpc.CallOption) (*CartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CartResponse)
	err := c.cc.Invoke(ctx, CartService_GetCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) UpdateCart(ctx context.Context, in *UpdateCartRequest, opts ...grpc.CallOption) (*CartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CartResponse)
	err := c.cc.Invoke(ctx, CartService_UpdateCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) DeleteCart(ctx context.Context, in *DeleteCartRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CartService_DeleteCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) AddCartItem(ctx context.Context, in *AddCartItemRequest, opts ...grpc.CallOption) (*CartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CartResponse)
	err := c.cc.Invoke(ctx, CartService_AddCartItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) RemoveCartItem(ctx context.Context, in *RemoveCartItemRequest, opts ...grpc.CallOption) (*CartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CartResponse)
	err := c.cc.Invoke(ctx, CartService_RemoveCartItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) AddQuantity(ctx context.Context, in *AddQuantityRequest, opts ...grpc.CallOption) (*CartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CartResponse)
	err := c.cc.Invoke(ctx, CartService_AddQuantity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) RemoveQuantity(ctx context.Context, in *RemoveQuantityRequest, opts ...grpc.CallOption) (*CartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CartResponse)
	err := c.cc.Invoke(ctx, CartService_RemoveQuantity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) CreateAddOn(ctx context.Context, in *CreateAddOnRequest, opts ...grpc.CallOption) (*CartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CartResponse)
	err := c.cc.Invoke(ctx, CartService_CreateAddOn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) UpdateAddOn(ctx context.Context, in *UpdateAddOnRequest, opts ...grpc.CallOption) (*CartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CartResponse)
	err := c.cc.Invoke(ctx, CartService_UpdateAddOn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) RemoveAddOn(ctx context.Context, in *RemoveAddOnRequest, opts ...grpc.CallOption) (*CartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CartResponse)
	err := c.cc.Invoke(ctx, CartService_RemoveAddOn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) IncreaseAddOnQuantity(ctx context.Context, in *IncreaseAddOnQuantityRequest, opts ...grpc.CallOption) (*CartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CartResponse)
	err := c.cc.Invoke(ctx, CartService_IncreaseAddOnQuantity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) RemoveAddOnQuantity(ctx context.Context, in *RemoveAddOnQuantityRequest, opts ...grpc.CallOption) (*CartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CartResponse)
	err := c.cc.Invoke(ctx, CartService_RemoveAddOnQuantity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) ValidateCoupon(ctx context.Context, in *ValidCouponResquest, opts ...grpc.CallOption) (*ValidCouponResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidCouponResponse)
	err := c.cc.Invoke(ctx, CartService_ValidateCoupon_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) AddCoupon(ctx context.Context, in *AddCouponRequest, opts ...grpc.CallOption) (*CartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CartResponse)
	err := c.cc.Invoke(ctx, CartService_AddCoupon_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) RemoveCoupon(ctx context.Context, in *RemoveCouponRequest, opts ...grpc.CallOption) (*CartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CartResponse)
	err := c.cc.Invoke(ctx, CartService_RemoveCoupon_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) ValidateCart(ctx context.Context, in *ValidateCartRequest, opts ...grpc.CallOption) (*CartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CartResponse)
	err := c.cc.Invoke(ctx, CartService_ValidateCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CartServiceServer is the server API for CartService service.
// All implementations must embed UnimplementedCartServiceServer
// for forward compatibility.
type CartServiceServer interface {
	// Core Cart Service
	CreateCart(context.Context, *CreateCartRequest) (*CartResponse, error)
	GetCart(context.Context, *GetCartRequest) (*CartResponse, error)
	UpdateCart(context.Context, *UpdateCartRequest) (*CartResponse, error)
	DeleteCart(context.Context, *DeleteCartRequest) (*emptypb.Empty, error)
	// Cart item Service
	AddCartItem(context.Context, *AddCartItemRequest) (*CartResponse, error)
	RemoveCartItem(context.Context, *RemoveCartItemRequest) (*CartResponse, error)
	AddQuantity(context.Context, *AddQuantityRequest) (*CartResponse, error)
	RemoveQuantity(context.Context, *RemoveQuantityRequest) (*CartResponse, error)
	CreateAddOn(context.Context, *CreateAddOnRequest) (*CartResponse, error)
	UpdateAddOn(context.Context, *UpdateAddOnRequest) (*CartResponse, error)
	RemoveAddOn(context.Context, *RemoveAddOnRequest) (*CartResponse, error)
	IncreaseAddOnQuantity(context.Context, *IncreaseAddOnQuantityRequest) (*CartResponse, error)
	RemoveAddOnQuantity(context.Context, *RemoveAddOnQuantityRequest) (*CartResponse, error)
	ValidateCoupon(context.Context, *ValidCouponResquest) (*ValidCouponResponse, error)
	AddCoupon(context.Context, *AddCouponRequest) (*CartResponse, error)
	RemoveCoupon(context.Context, *RemoveCouponRequest) (*CartResponse, error)
	ValidateCart(context.Context, *ValidateCartRequest) (*CartResponse, error)
	mustEmbedUnimplementedCartServiceServer()
}

// UnimplementedCartServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCartServiceServer struct{}

func (UnimplementedCartServiceServer) CreateCart(context.Context, *CreateCartRequest) (*CartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCart not implemented")
}
func (UnimplementedCartServiceServer) GetCart(context.Context, *GetCartRequest) (*CartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCart not implemented")
}
func (UnimplementedCartServiceServer) UpdateCart(context.Context, *UpdateCartRequest) (*CartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCart not implemented")
}
func (UnimplementedCartServiceServer) DeleteCart(context.Context, *DeleteCartRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCart not implemented")
}
func (UnimplementedCartServiceServer) AddCartItem(context.Context, *AddCartItemRequest) (*CartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCartItem not implemented")
}
func (UnimplementedCartServiceServer) RemoveCartItem(context.Context, *RemoveCartItemRequest) (*CartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCartItem not implemented")
}
func (UnimplementedCartServiceServer) AddQuantity(context.Context, *AddQuantityRequest) (*CartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddQuantity not implemented")
}
func (UnimplementedCartServiceServer) RemoveQuantity(context.Context, *RemoveQuantityRequest) (*CartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveQuantity not implemented")
}
func (UnimplementedCartServiceServer) CreateAddOn(context.Context, *CreateAddOnRequest) (*CartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAddOn not implemented")
}
func (UnimplementedCartServiceServer) UpdateAddOn(context.Context, *UpdateAddOnRequest) (*CartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAddOn not implemented")
}
func (UnimplementedCartServiceServer) RemoveAddOn(context.Context, *RemoveAddOnRequest) (*CartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAddOn not implemented")
}
func (UnimplementedCartServiceServer) IncreaseAddOnQuantity(context.Context, *IncreaseAddOnQuantityRequest) (*CartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncreaseAddOnQuantity not implemented")
}
func (UnimplementedCartServiceServer) RemoveAddOnQuantity(context.Context, *RemoveAddOnQuantityRequest) (*CartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAddOnQuantity not implemented")
}
func (UnimplementedCartServiceServer) ValidateCoupon(context.Context, *ValidCouponResquest) (*ValidCouponResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateCoupon not implemented")
}
func (UnimplementedCartServiceServer) AddCoupon(context.Context, *AddCouponRequest) (*CartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCoupon not implemented")
}
func (UnimplementedCartServiceServer) RemoveCoupon(context.Context, *RemoveCouponRequest) (*CartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCoupon not implemented")
}
func (UnimplementedCartServiceServer) ValidateCart(context.Context, *ValidateCartRequest) (*CartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateCart not implemented")
}
func (UnimplementedCartServiceServer) mustEmbedUnimplementedCartServiceServer() {}
func (UnimplementedCartServiceServer) testEmbeddedByValue()                     {}

// UnsafeCartServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CartServiceServer will
// result in compilation errors.
type UnsafeCartServiceServer interface {
	mustEmbedUnimplementedCartServiceServer()
}

func RegisterCartServiceServer(s grpc.ServiceRegistrar, srv CartServiceServer) {
	// If the following call pancis, it indicates UnimplementedCartServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CartService_ServiceDesc, srv)
}

func _CartService_CreateCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).CreateCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_CreateCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).CreateCart(ctx, req.(*CreateCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_GetCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).GetCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_GetCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).GetCart(ctx, req.(*GetCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_UpdateCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).UpdateCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_UpdateCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).UpdateCart(ctx, req.(*UpdateCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_DeleteCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).DeleteCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_DeleteCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).DeleteCart(ctx, req.(*DeleteCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_AddCartItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCartItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).AddCartItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_AddCartItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).AddCartItem(ctx, req.(*AddCartItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_RemoveCartItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCartItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).RemoveCartItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_RemoveCartItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).RemoveCartItem(ctx, req.(*RemoveCartItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_AddQuantity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddQuantityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).AddQuantity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_AddQuantity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).AddQuantity(ctx, req.(*AddQuantityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_RemoveQuantity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveQuantityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).RemoveQuantity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_RemoveQuantity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).RemoveQuantity(ctx, req.(*RemoveQuantityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_CreateAddOn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAddOnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).CreateAddOn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_CreateAddOn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).CreateAddOn(ctx, req.(*CreateAddOnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_UpdateAddOn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAddOnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).UpdateAddOn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_UpdateAddOn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).UpdateAddOn(ctx, req.(*UpdateAddOnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_RemoveAddOn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAddOnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).RemoveAddOn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_RemoveAddOn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).RemoveAddOn(ctx, req.(*RemoveAddOnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_IncreaseAddOnQuantity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncreaseAddOnQuantityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).IncreaseAddOnQuantity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_IncreaseAddOnQuantity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).IncreaseAddOnQuantity(ctx, req.(*IncreaseAddOnQuantityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_RemoveAddOnQuantity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAddOnQuantityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).RemoveAddOnQuantity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_RemoveAddOnQuantity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).RemoveAddOnQuantity(ctx, req.(*RemoveAddOnQuantityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_ValidateCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidCouponResquest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).ValidateCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_ValidateCoupon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).ValidateCoupon(ctx, req.(*ValidCouponResquest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_AddCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCouponRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).AddCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_AddCoupon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).AddCoupon(ctx, req.(*AddCouponRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_RemoveCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCouponRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).RemoveCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_RemoveCoupon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).RemoveCoupon(ctx, req.(*RemoveCouponRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_ValidateCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateCartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).ValidateCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CartService_ValidateCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).ValidateCart(ctx, req.(*ValidateCartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CartService_ServiceDesc is the grpc.ServiceDesc for CartService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CartService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Cart_v1.CartService",
	HandlerType: (*CartServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCart",
			Handler:    _CartService_CreateCart_Handler,
		},
		{
			MethodName: "GetCart",
			Handler:    _CartService_GetCart_Handler,
		},
		{
			MethodName: "UpdateCart",
			Handler:    _CartService_UpdateCart_Handler,
		},
		{
			MethodName: "DeleteCart",
			Handler:    _CartService_DeleteCart_Handler,
		},
		{
			MethodName: "AddCartItem",
			Handler:    _CartService_AddCartItem_Handler,
		},
		{
			MethodName: "RemoveCartItem",
			Handler:    _CartService_RemoveCartItem_Handler,
		},
		{
			MethodName: "AddQuantity",
			Handler:    _CartService_AddQuantity_Handler,
		},
		{
			MethodName: "RemoveQuantity",
			Handler:    _CartService_RemoveQuantity_Handler,
		},
		{
			MethodName: "CreateAddOn",
			Handler:    _CartService_CreateAddOn_Handler,
		},
		{
			MethodName: "UpdateAddOn",
			Handler:    _CartService_UpdateAddOn_Handler,
		},
		{
			MethodName: "RemoveAddOn",
			Handler:    _CartService_RemoveAddOn_Handler,
		},
		{
			MethodName: "IncreaseAddOnQuantity",
			Handler:    _CartService_IncreaseAddOnQuantity_Handler,
		},
		{
			MethodName: "RemoveAddOnQuantity",
			Handler:    _CartService_RemoveAddOnQuantity_Handler,
		},
		{
			MethodName: "ValidateCoupon",
			Handler:    _CartService_ValidateCoupon_Handler,
		},
		{
			MethodName: "AddCoupon",
			Handler:    _CartService_AddCoupon_Handler,
		},
		{
			MethodName: "RemoveCoupon",
			Handler:    _CartService_RemoveCoupon_Handler,
		},
		{
			MethodName: "ValidateCart",
			Handler:    _CartService_ValidateCart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cart.proto",
}

const (
	CouponService_CreateCoupon_FullMethodName   = "/Cart_v1.CouponService/CreateCoupon"
	CouponService_GetCoupon_FullMethodName      = "/Cart_v1.CouponService/GetCoupon"
	CouponService_UpdateCoupon_FullMethodName   = "/Cart_v1.CouponService/UpdateCoupon"
	CouponService_DeleteCoupon_FullMethodName   = "/Cart_v1.CouponService/DeleteCoupon"
	CouponService_ListCoupon_FullMethodName     = "/Cart_v1.CouponService/listCoupon"
	CouponService_GetCouponUsage_FullMethodName = "/Cart_v1.CouponService/GetCouponUsage"
)

// CouponServiceClient is the client API for CouponService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CouponServiceClient interface {
	// COre Coupon service
	CreateCoupon(ctx context.Context, in *CreateCouponRequest, opts ...grpc.CallOption) (*Coupon, error)
	GetCoupon(ctx context.Context, in *GetCouponRequest, opts ...grpc.CallOption) (*Coupon, error)
	UpdateCoupon(ctx context.Context, in *UpdateCouponRequest, opts ...grpc.CallOption) (*Coupon, error)
	DeleteCoupon(ctx context.Context, in *DeleteCouponRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListCoupon(ctx context.Context, in *ListCouponRequest, opts ...grpc.CallOption) (*ListCouponResponse, error)
	GetCouponUsage(ctx context.Context, in *GetCouponUsageRequest, opts ...grpc.CallOption) (*GetCouponUsageResponse, error)
}

type couponServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCouponServiceClient(cc grpc.ClientConnInterface) CouponServiceClient {
	return &couponServiceClient{cc}
}

func (c *couponServiceClient) CreateCoupon(ctx context.Context, in *CreateCouponRequest, opts ...grpc.CallOption) (*Coupon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Coupon)
	err := c.cc.Invoke(ctx, CouponService_CreateCoupon_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponServiceClient) GetCoupon(ctx context.Context, in *GetCouponRequest, opts ...grpc.CallOption) (*Coupon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Coupon)
	err := c.cc.Invoke(ctx, CouponService_GetCoupon_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponServiceClient) UpdateCoupon(ctx context.Context, in *UpdateCouponRequest, opts ...grpc.CallOption) (*Coupon, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Coupon)
	err := c.cc.Invoke(ctx, CouponService_UpdateCoupon_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponServiceClient) DeleteCoupon(ctx context.Context, in *DeleteCouponRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CouponService_DeleteCoupon_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponServiceClient) ListCoupon(ctx context.Context, in *ListCouponRequest, opts ...grpc.CallOption) (*ListCouponResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCouponResponse)
	err := c.cc.Invoke(ctx, CouponService_ListCoupon_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponServiceClient) GetCouponUsage(ctx context.Context, in *GetCouponUsageRequest, opts ...grpc.CallOption) (*GetCouponUsageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCouponUsageResponse)
	err := c.cc.Invoke(ctx, CouponService_GetCouponUsage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CouponServiceServer is the server API for CouponService service.
// All implementations must embed UnimplementedCouponServiceServer
// for forward compatibility.
type CouponServiceServer interface {
	// COre Coupon service
	CreateCoupon(context.Context, *CreateCouponRequest) (*Coupon, error)
	GetCoupon(context.Context, *GetCouponRequest) (*Coupon, error)
	UpdateCoupon(context.Context, *UpdateCouponRequest) (*Coupon, error)
	DeleteCoupon(context.Context, *DeleteCouponRequest) (*emptypb.Empty, error)
	ListCoupon(context.Context, *ListCouponRequest) (*ListCouponResponse, error)
	GetCouponUsage(context.Context, *GetCouponUsageRequest) (*GetCouponUsageResponse, error)
	mustEmbedUnimplementedCouponServiceServer()
}

// UnimplementedCouponServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCouponServiceServer struct{}

func (UnimplementedCouponServiceServer) CreateCoupon(context.Context, *CreateCouponRequest) (*Coupon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCoupon not implemented")
}
func (UnimplementedCouponServiceServer) GetCoupon(context.Context, *GetCouponRequest) (*Coupon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoupon not implemented")
}
func (UnimplementedCouponServiceServer) UpdateCoupon(context.Context, *UpdateCouponRequest) (*Coupon, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCoupon not implemented")
}
func (UnimplementedCouponServiceServer) DeleteCoupon(context.Context, *DeleteCouponRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCoupon not implemented")
}
func (UnimplementedCouponServiceServer) ListCoupon(context.Context, *ListCouponRequest) (*ListCouponResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCoupon not implemented")
}
func (UnimplementedCouponServiceServer) GetCouponUsage(context.Context, *GetCouponUsageRequest) (*GetCouponUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCouponUsage not implemented")
}
func (UnimplementedCouponServiceServer) mustEmbedUnimplementedCouponServiceServer() {}
func (UnimplementedCouponServiceServer) testEmbeddedByValue()                       {}

// UnsafeCouponServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CouponServiceServer will
// result in compilation errors.
type UnsafeCouponServiceServer interface {
	mustEmbedUnimplementedCouponServiceServer()
}

func RegisterCouponServiceServer(s grpc.ServiceRegistrar, srv CouponServiceServer) {
	// If the following call pancis, it indicates UnimplementedCouponServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CouponService_ServiceDesc, srv)
}

func _CouponService_CreateCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCouponRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServiceServer).CreateCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponService_CreateCoupon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServiceServer).CreateCoupon(ctx, req.(*CreateCouponRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponService_GetCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCouponRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServiceServer).GetCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponService_GetCoupon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServiceServer).GetCoupon(ctx, req.(*GetCouponRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponService_UpdateCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCouponRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServiceServer).UpdateCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponService_UpdateCoupon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServiceServer).UpdateCoupon(ctx, req.(*UpdateCouponRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponService_DeleteCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCouponRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServiceServer).DeleteCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponService_DeleteCoupon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServiceServer).DeleteCoupon(ctx, req.(*DeleteCouponRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponService_ListCoupon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCouponRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServiceServer).ListCoupon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponService_ListCoupon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServiceServer).ListCoupon(ctx, req.(*ListCouponRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CouponService_GetCouponUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCouponUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServiceServer).GetCouponUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CouponService_GetCouponUsage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServiceServer).GetCouponUsage(ctx, req.(*GetCouponUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CouponService_ServiceDesc is the grpc.ServiceDesc for CouponService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CouponService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Cart_v1.CouponService",
	HandlerType: (*CouponServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCoupon",
			Handler:    _CouponService_CreateCoupon_Handler,
		},
		{
			MethodName: "GetCoupon",
			Handler:    _CouponService_GetCoupon_Handler,
		},
		{
			MethodName: "UpdateCoupon",
			Handler:    _CouponService_UpdateCoupon_Handler,
		},
		{
			MethodName: "DeleteCoupon",
			Handler:    _CouponService_DeleteCoupon_Handler,
		},
		{
			MethodName: "listCoupon",
			Handler:    _CouponService_ListCoupon_Handler,
		},
		{
			MethodName: "GetCouponUsage",
			Handler:    _CouponService_GetCouponUsage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cart.proto",
}
