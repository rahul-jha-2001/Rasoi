// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.28.2
// source: order.proto

package order

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enums
type OrderState int32

const (
	OrderState_ORDER_STATE_UNSPECIFIED     OrderState = 0
	OrderState_ORDER_STATE_PAYMENT_PENDING OrderState = 1
	OrderState_ORDER_STATE_PLACED          OrderState = 2
	OrderState_ORDER_STATE_PREPARING       OrderState = 3
	OrderState_ORDER_STATE_READY           OrderState = 4
	OrderState_ORDER_STATE_COMPLETED       OrderState = 5
	OrderState_ORDER_STATE_CANCELED        OrderState = 6
)

// Enum value maps for OrderState.
var (
	OrderState_name = map[int32]string{
		0: "ORDER_STATE_UNSPECIFIED",
		1: "ORDER_STATE_PAYMENT_PENDING",
		2: "ORDER_STATE_PLACED",
		3: "ORDER_STATE_PREPARING",
		4: "ORDER_STATE_READY",
		5: "ORDER_STATE_COMPLETED",
		6: "ORDER_STATE_CANCELED",
	}
	OrderState_value = map[string]int32{
		"ORDER_STATE_UNSPECIFIED":     0,
		"ORDER_STATE_PAYMENT_PENDING": 1,
		"ORDER_STATE_PLACED":          2,
		"ORDER_STATE_PREPARING":       3,
		"ORDER_STATE_READY":           4,
		"ORDER_STATE_COMPLETED":       5,
		"ORDER_STATE_CANCELED":        6,
	}
)

func (x OrderState) Enum() *OrderState {
	p := new(OrderState)
	*p = x
	return p
}

func (x OrderState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderState) Descriptor() protoreflect.EnumDescriptor {
	return file_order_proto_enumTypes[0].Descriptor()
}

func (OrderState) Type() protoreflect.EnumType {
	return &file_order_proto_enumTypes[0]
}

func (x OrderState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderState.Descriptor instead.
func (OrderState) EnumDescriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{0}
}

type PaymentState int32

const (
	PaymentState_PAYMENT_STATE_UNSPECIFIED PaymentState = 0
	PaymentState_PAYMENT_STATE_PENDING     PaymentState = 1
	PaymentState_PAYMENT_STATE_COMPLETE    PaymentState = 2
	PaymentState_PAYMENT_STATE_FAILED      PaymentState = 3
	PaymentState_PAYMENT_STATE_REFUNDED    PaymentState = 4
)

// Enum value maps for PaymentState.
var (
	PaymentState_name = map[int32]string{
		0: "PAYMENT_STATE_UNSPECIFIED",
		1: "PAYMENT_STATE_PENDING",
		2: "PAYMENT_STATE_COMPLETE",
		3: "PAYMENT_STATE_FAILED",
		4: "PAYMENT_STATE_REFUNDED",
	}
	PaymentState_value = map[string]int32{
		"PAYMENT_STATE_UNSPECIFIED": 0,
		"PAYMENT_STATE_PENDING":     1,
		"PAYMENT_STATE_COMPLETE":    2,
		"PAYMENT_STATE_FAILED":      3,
		"PAYMENT_STATE_REFUNDED":    4,
	}
)

func (x PaymentState) Enum() *PaymentState {
	p := new(PaymentState)
	*p = x
	return p
}

func (x PaymentState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentState) Descriptor() protoreflect.EnumDescriptor {
	return file_order_proto_enumTypes[1].Descriptor()
}

func (PaymentState) Type() protoreflect.EnumType {
	return &file_order_proto_enumTypes[1]
}

func (x PaymentState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaymentState.Descriptor instead.
func (PaymentState) EnumDescriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{1}
}

type PaymentMethod int32

const (
	PaymentMethod_PAYMENT_METHOD_UNSPECIFIED PaymentMethod = 0
	PaymentMethod_PAYMENT_METHOD_RAZORPAY    PaymentMethod = 1
	PaymentMethod_PAYMENT_METHOD_CASH        PaymentMethod = 2
	PaymentMethod_PAYMENT_METHOD_CARD        PaymentMethod = 3
	PaymentMethod_PAYMENT_METHOD_UPI         PaymentMethod = 4
	PaymentMethod_PAYMENT_METHOD_NETBANKING  PaymentMethod = 5
)

// Enum value maps for PaymentMethod.
var (
	PaymentMethod_name = map[int32]string{
		0: "PAYMENT_METHOD_UNSPECIFIED",
		1: "PAYMENT_METHOD_RAZORPAY",
		2: "PAYMENT_METHOD_CASH",
		3: "PAYMENT_METHOD_CARD",
		4: "PAYMENT_METHOD_UPI",
		5: "PAYMENT_METHOD_NETBANKING",
	}
	PaymentMethod_value = map[string]int32{
		"PAYMENT_METHOD_UNSPECIFIED": 0,
		"PAYMENT_METHOD_RAZORPAY":    1,
		"PAYMENT_METHOD_CASH":        2,
		"PAYMENT_METHOD_CARD":        3,
		"PAYMENT_METHOD_UPI":         4,
		"PAYMENT_METHOD_NETBANKING":  5,
	}
)

func (x PaymentMethod) Enum() *PaymentMethod {
	p := new(PaymentMethod)
	*p = x
	return p
}

func (x PaymentMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_order_proto_enumTypes[2].Descriptor()
}

func (PaymentMethod) Type() protoreflect.EnumType {
	return &file_order_proto_enumTypes[2]
}

func (x PaymentMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaymentMethod.Descriptor instead.
func (PaymentMethod) EnumDescriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{2}
}

type OrderType int32

const (
	OrderType_ORDER_TYPE_UNSPECIFIED OrderType = 0
	OrderType_ORDER_TYPE_DINE_IN     OrderType = 1
	OrderType_ORDER_TYPE_TAKE_AWAY   OrderType = 2
	OrderType_ORDER_TYPE_DRIVE_THRU  OrderType = 3
)

// Enum value maps for OrderType.
var (
	OrderType_name = map[int32]string{
		0: "ORDER_TYPE_UNSPECIFIED",
		1: "ORDER_TYPE_DINE_IN",
		2: "ORDER_TYPE_TAKE_AWAY",
		3: "ORDER_TYPE_DRIVE_THRU",
	}
	OrderType_value = map[string]int32{
		"ORDER_TYPE_UNSPECIFIED": 0,
		"ORDER_TYPE_DINE_IN":     1,
		"ORDER_TYPE_TAKE_AWAY":   2,
		"ORDER_TYPE_DRIVE_THRU":  3,
	}
)

func (x OrderType) Enum() *OrderType {
	p := new(OrderType)
	*p = x
	return p
}

func (x OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_order_proto_enumTypes[3].Descriptor()
}

func (OrderType) Type() protoreflect.EnumType {
	return &file_order_proto_enumTypes[3]
}

func (x OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderType.Descriptor instead.
func (OrderType) EnumDescriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{3}
}

type OrderOpration int32

const (
	OrderOpration_ORDER_OP_UNSPECIFIED OrderOpration = 0
	OrderOpration_ORDER_OP_CREATE      OrderOpration = 1
	OrderOpration_ORDER_OP_UPDATE      OrderOpration = 2
)

// Enum value maps for OrderOpration.
var (
	OrderOpration_name = map[int32]string{
		0: "ORDER_OP_UNSPECIFIED",
		1: "ORDER_OP_CREATE",
		2: "ORDER_OP_UPDATE",
	}
	OrderOpration_value = map[string]int32{
		"ORDER_OP_UNSPECIFIED": 0,
		"ORDER_OP_CREATE":      1,
		"ORDER_OP_UPDATE":      2,
	}
)

func (x OrderOpration) Enum() *OrderOpration {
	p := new(OrderOpration)
	*p = x
	return p
}

func (x OrderOpration) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderOpration) Descriptor() protoreflect.EnumDescriptor {
	return file_order_proto_enumTypes[4].Descriptor()
}

func (OrderOpration) Type() protoreflect.EnumType {
	return &file_order_proto_enumTypes[4]
}

func (x OrderOpration) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderOpration.Descriptor instead.
func (OrderOpration) EnumDescriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{4}
}

// Messages
type OrderStoreView struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	OrderUuid           string                 `protobuf:"bytes,1,opt,name=order_uuid,json=orderUuid,proto3" json:"order_uuid,omitempty"` // Primary key
	OrderNo             string                 `protobuf:"bytes,2,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`       // Public order number
	StoreUuid           string                 `protobuf:"bytes,3,opt,name=store_uuid,json=storeUuid,proto3" json:"store_uuid,omitempty"`
	UserPhoneNo         string                 `protobuf:"bytes,4,opt,name=user_phone_no,json=userPhoneNo,proto3" json:"user_phone_no,omitempty"`
	OrderType           OrderType              `protobuf:"varint,5,opt,name=order_type,json=orderType,proto3,enum=Order_v1.OrderType" json:"order_type,omitempty"`
	TableNo             *string                `protobuf:"bytes,6,opt,name=table_no,json=tableNo,proto3,oneof" json:"table_no,omitempty"`
	VehicleNo           *string                `protobuf:"bytes,7,opt,name=vehicle_no,json=vehicleNo,proto3,oneof" json:"vehicle_no,omitempty"`
	VehicleDescription  *string                `protobuf:"bytes,8,opt,name=vehicle_description,json=vehicleDescription,proto3,oneof" json:"vehicle_description,omitempty"`
	CouponCode          *string                `protobuf:"bytes,9,opt,name=coupon_code,json=couponCode,proto3,oneof" json:"coupon_code,omitempty"`
	Items               []*OrderItem           `protobuf:"bytes,10,rep,name=items,proto3" json:"items,omitempty"`
	SpecialInstructions string                 `protobuf:"bytes,11,opt,name=special_instructions,json=specialInstructions,proto3" json:"special_instructions,omitempty"`
	OrderStatus         OrderState             `protobuf:"varint,12,opt,name=order_status,json=orderStatus,proto3,enum=Order_v1.OrderState" json:"order_status,omitempty"`
	Payment             *OrderPayment          `protobuf:"bytes,13,opt,name=payment,proto3" json:"payment,omitempty"`
	// Financial fields
	SubtotalAmount float32                `protobuf:"fixed32,15,opt,name=subtotal_amount,json=subtotalAmount,proto3" json:"subtotal_amount,omitempty"`
	DiscountAmount float32                `protobuf:"fixed32,16,opt,name=discount_amount,json=discountAmount,proto3" json:"discount_amount,omitempty"`
	PriceBeforeTax float32                `protobuf:"fixed32,17,opt,name=price_before_tax,json=priceBeforeTax,proto3" json:"price_before_tax,omitempty"`
	TaxAmount      float32                `protobuf:"fixed32,18,opt,name=tax_amount,json=taxAmount,proto3" json:"tax_amount,omitempty"`
	PackagingCost  float32                `protobuf:"fixed32,19,opt,name=packaging_cost,json=packagingCost,proto3" json:"packaging_cost,omitempty"`
	FinalAmount    float32                `protobuf:"fixed32,20,opt,name=final_amount,json=finalAmount,proto3" json:"final_amount,omitempty"` // Added from model property
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	CartUuid       string                 `protobuf:"bytes,24,opt,name=cart_uuid,json=cartUuid,proto3" json:"cart_uuid,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *OrderStoreView) Reset() {
	*x = OrderStoreView{}
	mi := &file_order_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderStoreView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderStoreView) ProtoMessage() {}

func (x *OrderStoreView) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderStoreView.ProtoReflect.Descriptor instead.
func (*OrderStoreView) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{0}
}

func (x *OrderStoreView) GetOrderUuid() string {
	if x != nil {
		return x.OrderUuid
	}
	return ""
}

func (x *OrderStoreView) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *OrderStoreView) GetStoreUuid() string {
	if x != nil {
		return x.StoreUuid
	}
	return ""
}

func (x *OrderStoreView) GetUserPhoneNo() string {
	if x != nil {
		return x.UserPhoneNo
	}
	return ""
}

func (x *OrderStoreView) GetOrderType() OrderType {
	if x != nil {
		return x.OrderType
	}
	return OrderType_ORDER_TYPE_UNSPECIFIED
}

func (x *OrderStoreView) GetTableNo() string {
	if x != nil && x.TableNo != nil {
		return *x.TableNo
	}
	return ""
}

func (x *OrderStoreView) GetVehicleNo() string {
	if x != nil && x.VehicleNo != nil {
		return *x.VehicleNo
	}
	return ""
}

func (x *OrderStoreView) GetVehicleDescription() string {
	if x != nil && x.VehicleDescription != nil {
		return *x.VehicleDescription
	}
	return ""
}

func (x *OrderStoreView) GetCouponCode() string {
	if x != nil && x.CouponCode != nil {
		return *x.CouponCode
	}
	return ""
}

func (x *OrderStoreView) GetItems() []*OrderItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *OrderStoreView) GetSpecialInstructions() string {
	if x != nil {
		return x.SpecialInstructions
	}
	return ""
}

func (x *OrderStoreView) GetOrderStatus() OrderState {
	if x != nil {
		return x.OrderStatus
	}
	return OrderState_ORDER_STATE_UNSPECIFIED
}

func (x *OrderStoreView) GetPayment() *OrderPayment {
	if x != nil {
		return x.Payment
	}
	return nil
}

func (x *OrderStoreView) GetSubtotalAmount() float32 {
	if x != nil {
		return x.SubtotalAmount
	}
	return 0
}

func (x *OrderStoreView) GetDiscountAmount() float32 {
	if x != nil {
		return x.DiscountAmount
	}
	return 0
}

func (x *OrderStoreView) GetPriceBeforeTax() float32 {
	if x != nil {
		return x.PriceBeforeTax
	}
	return 0
}

func (x *OrderStoreView) GetTaxAmount() float32 {
	if x != nil {
		return x.TaxAmount
	}
	return 0
}

func (x *OrderStoreView) GetPackagingCost() float32 {
	if x != nil {
		return x.PackagingCost
	}
	return 0
}

func (x *OrderStoreView) GetFinalAmount() float32 {
	if x != nil {
		return x.FinalAmount
	}
	return 0
}

func (x *OrderStoreView) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *OrderStoreView) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *OrderStoreView) GetCartUuid() string {
	if x != nil {
		return x.CartUuid
	}
	return ""
}

type OrderUserView struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	OrderUuid           string                 `protobuf:"bytes,1,opt,name=order_uuid,json=orderUuid,proto3" json:"order_uuid,omitempty"` // Primary key
	OrderNo             string                 `protobuf:"bytes,2,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`       // Public order number
	StoreUuid           string                 `protobuf:"bytes,3,opt,name=store_uuid,json=storeUuid,proto3" json:"store_uuid,omitempty"`
	CartUuid            string                 `protobuf:"bytes,4,opt,name=cart_uuid,json=cartUuid,proto3" json:"cart_uuid,omitempty"`
	UserPhoneNo         string                 `protobuf:"bytes,5,opt,name=user_phone_no,json=userPhoneNo,proto3" json:"user_phone_no,omitempty"`
	OrderType           OrderType              `protobuf:"varint,6,opt,name=order_type,json=orderType,proto3,enum=Order_v1.OrderType" json:"order_type,omitempty"`
	TableNo             string                 `protobuf:"bytes,7,opt,name=table_no,json=tableNo,proto3" json:"table_no,omitempty"`
	VehicleNo           string                 `protobuf:"bytes,8,opt,name=vehicle_no,json=vehicleNo,proto3" json:"vehicle_no,omitempty"`
	VehicleDescription  string                 `protobuf:"bytes,9,opt,name=vehicle_description,json=vehicleDescription,proto3" json:"vehicle_description,omitempty"`
	CouponCode          string                 `protobuf:"bytes,10,opt,name=coupon_code,json=couponCode,proto3" json:"coupon_code,omitempty"`
	SpecialInstructions string                 `protobuf:"bytes,11,opt,name=special_instructions,json=specialInstructions,proto3" json:"special_instructions,omitempty"`
	OrderStatus         OrderState             `protobuf:"varint,21,opt,name=order_status,json=orderStatus,proto3,enum=Order_v1.OrderState" json:"order_status,omitempty"`
	PaymentMethod       PaymentMethod          `protobuf:"varint,12,opt,name=payment_method,json=paymentMethod,proto3,enum=Order_v1.PaymentMethod" json:"payment_method,omitempty"`
	PaymentState        PaymentState           `protobuf:"varint,13,opt,name=payment_state,json=paymentState,proto3,enum=Order_v1.PaymentState" json:"payment_state,omitempty"`
	Items               []*OrderItem           `protobuf:"bytes,14,rep,name=items,proto3" json:"items,omitempty"`
	TotalSubtotal       float32                `protobuf:"fixed32,15,opt,name=total_subtotal,json=totalSubtotal,proto3" json:"total_subtotal,omitempty"` //Sum of all the total amounts of a
	TotalDiscount       float32                `protobuf:"fixed32,16,opt,name=total_discount,json=totalDiscount,proto3" json:"total_discount,omitempty"`
	TotalPriceBeforeTax float32                `protobuf:"fixed32,17,opt,name=total_price_before_tax,json=totalPriceBeforeTax,proto3" json:"total_price_before_tax,omitempty"`
	TotalTax            float32                `protobuf:"fixed32,18,opt,name=total_tax,json=totalTax,proto3" json:"total_tax,omitempty"`
	PackagingCost       float32                `protobuf:"fixed32,19,opt,name=packaging_cost,json=packagingCost,proto3" json:"packaging_cost,omitempty"`
	FinalAmount         float32                `protobuf:"fixed32,20,opt,name=final_amount,json=finalAmount,proto3" json:"final_amount,omitempty"` //Sum of all the final amounts of all the items in the cart.
	CreatedAt           *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt           *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *OrderUserView) Reset() {
	*x = OrderUserView{}
	mi := &file_order_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderUserView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderUserView) ProtoMessage() {}

func (x *OrderUserView) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderUserView.ProtoReflect.Descriptor instead.
func (*OrderUserView) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{1}
}

func (x *OrderUserView) GetOrderUuid() string {
	if x != nil {
		return x.OrderUuid
	}
	return ""
}

func (x *OrderUserView) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *OrderUserView) GetStoreUuid() string {
	if x != nil {
		return x.StoreUuid
	}
	return ""
}

func (x *OrderUserView) GetCartUuid() string {
	if x != nil {
		return x.CartUuid
	}
	return ""
}

func (x *OrderUserView) GetUserPhoneNo() string {
	if x != nil {
		return x.UserPhoneNo
	}
	return ""
}

func (x *OrderUserView) GetOrderType() OrderType {
	if x != nil {
		return x.OrderType
	}
	return OrderType_ORDER_TYPE_UNSPECIFIED
}

func (x *OrderUserView) GetTableNo() string {
	if x != nil {
		return x.TableNo
	}
	return ""
}

func (x *OrderUserView) GetVehicleNo() string {
	if x != nil {
		return x.VehicleNo
	}
	return ""
}

func (x *OrderUserView) GetVehicleDescription() string {
	if x != nil {
		return x.VehicleDescription
	}
	return ""
}

func (x *OrderUserView) GetCouponCode() string {
	if x != nil {
		return x.CouponCode
	}
	return ""
}

func (x *OrderUserView) GetSpecialInstructions() string {
	if x != nil {
		return x.SpecialInstructions
	}
	return ""
}

func (x *OrderUserView) GetOrderStatus() OrderState {
	if x != nil {
		return x.OrderStatus
	}
	return OrderState_ORDER_STATE_UNSPECIFIED
}

func (x *OrderUserView) GetPaymentMethod() PaymentMethod {
	if x != nil {
		return x.PaymentMethod
	}
	return PaymentMethod_PAYMENT_METHOD_UNSPECIFIED
}

func (x *OrderUserView) GetPaymentState() PaymentState {
	if x != nil {
		return x.PaymentState
	}
	return PaymentState_PAYMENT_STATE_UNSPECIFIED
}

func (x *OrderUserView) GetItems() []*OrderItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *OrderUserView) GetTotalSubtotal() float32 {
	if x != nil {
		return x.TotalSubtotal
	}
	return 0
}

func (x *OrderUserView) GetTotalDiscount() float32 {
	if x != nil {
		return x.TotalDiscount
	}
	return 0
}

func (x *OrderUserView) GetTotalPriceBeforeTax() float32 {
	if x != nil {
		return x.TotalPriceBeforeTax
	}
	return 0
}

func (x *OrderUserView) GetTotalTax() float32 {
	if x != nil {
		return x.TotalTax
	}
	return 0
}

func (x *OrderUserView) GetPackagingCost() float32 {
	if x != nil {
		return x.PackagingCost
	}
	return 0
}

func (x *OrderUserView) GetFinalAmount() float32 {
	if x != nil {
		return x.FinalAmount
	}
	return 0
}

func (x *OrderUserView) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *OrderUserView) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type OrderItem struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ItemUuid       string                 `protobuf:"bytes,1,opt,name=item_uuid,json=itemUuid,proto3" json:"item_uuid,omitempty"`
	ProductName    string                 `protobuf:"bytes,2,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	ProductUuid    string                 `protobuf:"bytes,3,opt,name=product_uuid,json=productUuid,proto3" json:"product_uuid,omitempty"`
	TaxPercentage  float32                `protobuf:"fixed32,4,opt,name=tax_percentage,json=taxPercentage,proto3" json:"tax_percentage,omitempty"`
	Discount       float32                `protobuf:"fixed32,15,opt,name=discount,proto3" json:"discount,omitempty"`
	UnitPrice      float32                `protobuf:"fixed32,5,opt,name=unit_price,json=unitPrice,proto3" json:"unit_price,omitempty"` //Price of a single unit of the item (before any discount or tax).
	Quantity       int32                  `protobuf:"varint,6,opt,name=quantity,proto3" json:"quantity,omitempty"`                     //Number of units of the item in the cart.
	AddOnsTotal    float32                `protobuf:"fixed32,7,opt,name=add_ons_total,json=addOnsTotal,proto3" json:"add_ons_total,omitempty"`
	SubtotalAmount float32                `protobuf:"fixed32,8,opt,name=subtotal_amount,json=subtotalAmount,proto3" json:"subtotal_amount,omitempty"`    //unit_price * quantity (total before discounts and tax).
	DiscountAmount float32                `protobuf:"fixed32,9,opt,name=discount_amount,json=discountAmount,proto3" json:"discount_amount,omitempty"`    //Discount applied to this specific item.
	PriceBeforeTax float32                `protobuf:"fixed32,10,opt,name=price_before_tax,json=priceBeforeTax,proto3" json:"price_before_tax,omitempty"` //(subtotal_amount - discount_amount).
	TaxAmount      float32                `protobuf:"fixed32,11,opt,name=tax_amount,json=taxAmount,proto3" json:"tax_amount,omitempty"`                  //Tax applied to the item.
	FinalPrice     float32                `protobuf:"fixed32,12,opt,name=final_price,json=finalPrice,proto3" json:"final_price,omitempty"`               //price_before_tax + tax_amount (final amount for the item).
	PackagingCost  float32                `protobuf:"fixed32,13,opt,name=packaging_cost,json=packagingCost,proto3" json:"packaging_cost,omitempty"`      //Price for Packaging if required
	AddOns         []*OrderItemAddOn      `protobuf:"bytes,14,rep,name=add_ons,json=addOns,proto3" json:"add_ons,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *OrderItem) Reset() {
	*x = OrderItem{}
	mi := &file_order_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderItem) ProtoMessage() {}

func (x *OrderItem) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderItem.ProtoReflect.Descriptor instead.
func (*OrderItem) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{2}
}

func (x *OrderItem) GetItemUuid() string {
	if x != nil {
		return x.ItemUuid
	}
	return ""
}

func (x *OrderItem) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *OrderItem) GetProductUuid() string {
	if x != nil {
		return x.ProductUuid
	}
	return ""
}

func (x *OrderItem) GetTaxPercentage() float32 {
	if x != nil {
		return x.TaxPercentage
	}
	return 0
}

func (x *OrderItem) GetDiscount() float32 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *OrderItem) GetUnitPrice() float32 {
	if x != nil {
		return x.UnitPrice
	}
	return 0
}

func (x *OrderItem) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *OrderItem) GetAddOnsTotal() float32 {
	if x != nil {
		return x.AddOnsTotal
	}
	return 0
}

func (x *OrderItem) GetSubtotalAmount() float32 {
	if x != nil {
		return x.SubtotalAmount
	}
	return 0
}

func (x *OrderItem) GetDiscountAmount() float32 {
	if x != nil {
		return x.DiscountAmount
	}
	return 0
}

func (x *OrderItem) GetPriceBeforeTax() float32 {
	if x != nil {
		return x.PriceBeforeTax
	}
	return 0
}

func (x *OrderItem) GetTaxAmount() float32 {
	if x != nil {
		return x.TaxAmount
	}
	return 0
}

func (x *OrderItem) GetFinalPrice() float32 {
	if x != nil {
		return x.FinalPrice
	}
	return 0
}

func (x *OrderItem) GetPackagingCost() float32 {
	if x != nil {
		return x.PackagingCost
	}
	return 0
}

func (x *OrderItem) GetAddOns() []*OrderItemAddOn {
	if x != nil {
		return x.AddOns
	}
	return nil
}

type OrderItemAddOn struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	AddOnName      string                 `protobuf:"bytes,1,opt,name=add_on_name,json=addOnName,proto3" json:"add_on_name,omitempty"`
	AddOnUuid      string                 `protobuf:"bytes,2,opt,name=add_on_uuid,json=addOnUuid,proto3" json:"add_on_uuid,omitempty"`
	Quantity       int32                  `protobuf:"varint,3,opt,name=quantity,proto3" json:"quantity,omitempty"`
	UnitPrice      float32                `protobuf:"fixed32,4,opt,name=unit_price,json=unitPrice,proto3" json:"unit_price,omitempty"`
	IsFree         bool                   `protobuf:"varint,5,opt,name=is_free,json=isFree,proto3" json:"is_free,omitempty"`
	SubtotalAmount float32                `protobuf:"fixed32,6,opt,name=subtotal_amount,json=subtotalAmount,proto3" json:"subtotal_amount,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *OrderItemAddOn) Reset() {
	*x = OrderItemAddOn{}
	mi := &file_order_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderItemAddOn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderItemAddOn) ProtoMessage() {}

func (x *OrderItemAddOn) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderItemAddOn.ProtoReflect.Descriptor instead.
func (*OrderItemAddOn) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{3}
}

func (x *OrderItemAddOn) GetAddOnName() string {
	if x != nil {
		return x.AddOnName
	}
	return ""
}

func (x *OrderItemAddOn) GetAddOnUuid() string {
	if x != nil {
		return x.AddOnUuid
	}
	return ""
}

func (x *OrderItemAddOn) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *OrderItemAddOn) GetUnitPrice() float32 {
	if x != nil {
		return x.UnitPrice
	}
	return 0
}

func (x *OrderItemAddOn) GetIsFree() bool {
	if x != nil {
		return x.IsFree
	}
	return false
}

func (x *OrderItemAddOn) GetSubtotalAmount() float32 {
	if x != nil {
		return x.SubtotalAmount
	}
	return 0
}

// Payment & History (if needed for responses)
type OrderPayment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PaymentUuid   string                 `protobuf:"bytes,1,opt,name=payment_uuid,json=paymentUuid,proto3" json:"payment_uuid,omitempty"`
	RzOrderId     *string                `protobuf:"bytes,2,opt,name=rz_order_id,json=rzOrderId,proto3,oneof" json:"rz_order_id,omitempty"`
	RzPaymentId   *string                `protobuf:"bytes,3,opt,name=rz_payment_id,json=rzPaymentId,proto3,oneof" json:"rz_payment_id,omitempty"`
	RzSignature   *string                `protobuf:"bytes,4,opt,name=rz_signature,json=rzSignature,proto3,oneof" json:"rz_signature,omitempty"`
	Amount        float32                `protobuf:"fixed32,5,opt,name=amount,proto3" json:"amount,omitempty"`
	PaymentStatus PaymentState           `protobuf:"varint,6,opt,name=payment_status,json=paymentStatus,proto3,enum=Order_v1.PaymentState" json:"payment_status,omitempty"`
	PaymentMethod PaymentMethod          `protobuf:"varint,7,opt,name=payment_method,json=paymentMethod,proto3,enum=Order_v1.PaymentMethod" json:"payment_method,omitempty"`
	Notes         string                 `protobuf:"bytes,8,opt,name=notes,proto3" json:"notes,omitempty"`
	PaymentTime   *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=payment_time,json=paymentTime,proto3" json:"payment_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderPayment) Reset() {
	*x = OrderPayment{}
	mi := &file_order_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderPayment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderPayment) ProtoMessage() {}

func (x *OrderPayment) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderPayment.ProtoReflect.Descriptor instead.
func (*OrderPayment) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{4}
}

func (x *OrderPayment) GetPaymentUuid() string {
	if x != nil {
		return x.PaymentUuid
	}
	return ""
}

func (x *OrderPayment) GetRzOrderId() string {
	if x != nil && x.RzOrderId != nil {
		return *x.RzOrderId
	}
	return ""
}

func (x *OrderPayment) GetRzPaymentId() string {
	if x != nil && x.RzPaymentId != nil {
		return *x.RzPaymentId
	}
	return ""
}

func (x *OrderPayment) GetRzSignature() string {
	if x != nil && x.RzSignature != nil {
		return *x.RzSignature
	}
	return ""
}

func (x *OrderPayment) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *OrderPayment) GetPaymentStatus() PaymentState {
	if x != nil {
		return x.PaymentStatus
	}
	return PaymentState_PAYMENT_STATE_UNSPECIFIED
}

func (x *OrderPayment) GetPaymentMethod() PaymentMethod {
	if x != nil {
		return x.PaymentMethod
	}
	return PaymentMethod_PAYMENT_METHOD_UNSPECIFIED
}

func (x *OrderPayment) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *OrderPayment) GetPaymentTime() *timestamppb.Timestamp {
	if x != nil {
		return x.PaymentTime
	}
	return nil
}

// Request/Response Structures
type CreateOrderRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StoreUuid     string                 `protobuf:"bytes,1,opt,name=store_uuid,json=storeUuid,proto3" json:"store_uuid,omitempty"`
	UserPhoneNo   string                 `protobuf:"bytes,2,opt,name=user_phone_no,json=userPhoneNo,proto3" json:"user_phone_no,omitempty"`
	CartUuid      string                 `protobuf:"bytes,3,opt,name=cart_uuid,json=cartUuid,proto3" json:"cart_uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateOrderRequest) Reset() {
	*x = CreateOrderRequest{}
	mi := &file_order_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderRequest) ProtoMessage() {}

func (x *CreateOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderRequest.ProtoReflect.Descriptor instead.
func (*CreateOrderRequest) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{5}
}

func (x *CreateOrderRequest) GetStoreUuid() string {
	if x != nil {
		return x.StoreUuid
	}
	return ""
}

func (x *CreateOrderRequest) GetUserPhoneNo() string {
	if x != nil {
		return x.UserPhoneNo
	}
	return ""
}

func (x *CreateOrderRequest) GetCartUuid() string {
	if x != nil {
		return x.CartUuid
	}
	return ""
}

type GetUserOrderRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OrderUuid     string                 `protobuf:"bytes,1,opt,name=order_uuid,json=orderUuid,proto3" json:"order_uuid,omitempty"`
	StoreUuid     string                 `protobuf:"bytes,2,opt,name=store_uuid,json=storeUuid,proto3" json:"store_uuid,omitempty"`
	UserPhoneNo   string                 `protobuf:"bytes,3,opt,name=user_phone_no,json=userPhoneNo,proto3" json:"user_phone_no,omitempty"`
	OrderNo       string                 `protobuf:"bytes,4,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserOrderRequest) Reset() {
	*x = GetUserOrderRequest{}
	mi := &file_order_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserOrderRequest) ProtoMessage() {}

func (x *GetUserOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserOrderRequest.ProtoReflect.Descriptor instead.
func (*GetUserOrderRequest) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{6}
}

func (x *GetUserOrderRequest) GetOrderUuid() string {
	if x != nil {
		return x.OrderUuid
	}
	return ""
}

func (x *GetUserOrderRequest) GetStoreUuid() string {
	if x != nil {
		return x.StoreUuid
	}
	return ""
}

func (x *GetUserOrderRequest) GetUserPhoneNo() string {
	if x != nil {
		return x.UserPhoneNo
	}
	return ""
}

func (x *GetUserOrderRequest) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

type CancelOrderRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StoreUuid     string                 `protobuf:"bytes,1,opt,name=store_uuid,json=storeUuid,proto3" json:"store_uuid,omitempty"`
	UserPhoneNo   string                 `protobuf:"bytes,2,opt,name=user_phone_no,json=userPhoneNo,proto3" json:"user_phone_no,omitempty"`
	OrderUuid     string                 `protobuf:"bytes,3,opt,name=order_uuid,json=orderUuid,proto3" json:"order_uuid,omitempty"`
	OrderNo       string                 `protobuf:"bytes,4,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelOrderRequest) Reset() {
	*x = CancelOrderRequest{}
	mi := &file_order_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelOrderRequest) ProtoMessage() {}

func (x *CancelOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelOrderRequest.ProtoReflect.Descriptor instead.
func (*CancelOrderRequest) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{7}
}

func (x *CancelOrderRequest) GetStoreUuid() string {
	if x != nil {
		return x.StoreUuid
	}
	return ""
}

func (x *CancelOrderRequest) GetUserPhoneNo() string {
	if x != nil {
		return x.UserPhoneNo
	}
	return ""
}

func (x *CancelOrderRequest) GetOrderUuid() string {
	if x != nil {
		return x.OrderUuid
	}
	return ""
}

func (x *CancelOrderRequest) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

type ListStoreOrderRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StoreUuid     string                 `protobuf:"bytes,1,opt,name=store_uuid,json=storeUuid,proto3" json:"store_uuid,omitempty"`
	UserPhoneNo   string                 `protobuf:"bytes,2,opt,name=user_phone_no,json=userPhoneNo,proto3" json:"user_phone_no,omitempty"`
	Limit         int32                  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Page          int32                  `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListStoreOrderRequest) Reset() {
	*x = ListStoreOrderRequest{}
	mi := &file_order_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListStoreOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStoreOrderRequest) ProtoMessage() {}

func (x *ListStoreOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStoreOrderRequest.ProtoReflect.Descriptor instead.
func (*ListStoreOrderRequest) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{8}
}

func (x *ListStoreOrderRequest) GetStoreUuid() string {
	if x != nil {
		return x.StoreUuid
	}
	return ""
}

func (x *ListStoreOrderRequest) GetUserPhoneNo() string {
	if x != nil {
		return x.UserPhoneNo
	}
	return ""
}

func (x *ListStoreOrderRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListStoreOrderRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

type StreamOrderRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StoreUuid     string                 `protobuf:"bytes,1,opt,name=store_uuid,json=storeUuid,proto3" json:"store_uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamOrderRequest) Reset() {
	*x = StreamOrderRequest{}
	mi := &file_order_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamOrderRequest) ProtoMessage() {}

func (x *StreamOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamOrderRequest.ProtoReflect.Descriptor instead.
func (*StreamOrderRequest) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{9}
}

func (x *StreamOrderRequest) GetStoreUuid() string {
	if x != nil {
		return x.StoreUuid
	}
	return ""
}

type ListStoreOrderResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Orders        []*OrderStoreView      `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
	NextPage      int32                  `protobuf:"varint,2,opt,name=next_page,json=nextPage,proto3" json:"next_page,omitempty"`
	PrevPage      int32                  `protobuf:"varint,3,opt,name=prev_page,json=prevPage,proto3" json:"prev_page,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListStoreOrderResponse) Reset() {
	*x = ListStoreOrderResponse{}
	mi := &file_order_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListStoreOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStoreOrderResponse) ProtoMessage() {}

func (x *ListStoreOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStoreOrderResponse.ProtoReflect.Descriptor instead.
func (*ListStoreOrderResponse) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{10}
}

func (x *ListStoreOrderResponse) GetOrders() []*OrderStoreView {
	if x != nil {
		return x.Orders
	}
	return nil
}

func (x *ListStoreOrderResponse) GetNextPage() int32 {
	if x != nil {
		return x.NextPage
	}
	return 0
}

func (x *ListStoreOrderResponse) GetPrevPage() int32 {
	if x != nil {
		return x.PrevPage
	}
	return 0
}

type UserOrderResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Order         *OrderUserView         `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserOrderResponse) Reset() {
	*x = UserOrderResponse{}
	mi := &file_order_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserOrderResponse) ProtoMessage() {}

func (x *UserOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserOrderResponse.ProtoReflect.Descriptor instead.
func (*UserOrderResponse) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{11}
}

func (x *UserOrderResponse) GetOrder() *OrderUserView {
	if x != nil {
		return x.Order
	}
	return nil
}

type StoreOrderResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Order         *OrderStoreView        `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StoreOrderResponse) Reset() {
	*x = StoreOrderResponse{}
	mi := &file_order_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoreOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreOrderResponse) ProtoMessage() {}

func (x *StoreOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreOrderResponse.ProtoReflect.Descriptor instead.
func (*StoreOrderResponse) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{12}
}

func (x *StoreOrderResponse) GetOrder() *OrderStoreView {
	if x != nil {
		return x.Order
	}
	return nil
}

type ListUserOrderRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StoreUuid     string                 `protobuf:"bytes,1,opt,name=store_uuid,json=storeUuid,proto3" json:"store_uuid,omitempty"`
	UserPhoneNo   string                 `protobuf:"bytes,2,opt,name=user_phone_no,json=userPhoneNo,proto3" json:"user_phone_no,omitempty"`
	Limit         int32                  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Page          int32                  `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListUserOrderRequest) Reset() {
	*x = ListUserOrderRequest{}
	mi := &file_order_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUserOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserOrderRequest) ProtoMessage() {}

func (x *ListUserOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserOrderRequest.ProtoReflect.Descriptor instead.
func (*ListUserOrderRequest) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{13}
}

func (x *ListUserOrderRequest) GetStoreUuid() string {
	if x != nil {
		return x.StoreUuid
	}
	return ""
}

func (x *ListUserOrderRequest) GetUserPhoneNo() string {
	if x != nil {
		return x.UserPhoneNo
	}
	return ""
}

func (x *ListUserOrderRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListUserOrderRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

type ListUserOrderResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Orders        []*OrderUserView       `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
	NextPage      int32                  `protobuf:"varint,2,opt,name=next_page,json=nextPage,proto3" json:"next_page,omitempty"`
	PrevPage      int32                  `protobuf:"varint,3,opt,name=prev_page,json=prevPage,proto3" json:"prev_page,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListUserOrderResponse) Reset() {
	*x = ListUserOrderResponse{}
	mi := &file_order_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUserOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserOrderResponse) ProtoMessage() {}

func (x *ListUserOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserOrderResponse.ProtoReflect.Descriptor instead.
func (*ListUserOrderResponse) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{14}
}

func (x *ListUserOrderResponse) GetOrders() []*OrderUserView {
	if x != nil {
		return x.Orders
	}
	return nil
}

func (x *ListUserOrderResponse) GetNextPage() int32 {
	if x != nil {
		return x.NextPage
	}
	return 0
}

func (x *ListUserOrderResponse) GetPrevPage() int32 {
	if x != nil {
		return x.PrevPage
	}
	return 0
}

type OrderResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Order         *OrderStoreView        `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderResponse) Reset() {
	*x = OrderResponse{}
	mi := &file_order_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderResponse) ProtoMessage() {}

func (x *OrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderResponse.ProtoReflect.Descriptor instead.
func (*OrderResponse) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{15}
}

func (x *OrderResponse) GetOrder() *OrderStoreView {
	if x != nil {
		return x.Order
	}
	return nil
}

type GetOrderRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OrderUuid     string                 `protobuf:"bytes,1,opt,name=order_uuid,json=orderUuid,proto3" json:"order_uuid,omitempty"`
	StoreUuid     string                 `protobuf:"bytes,2,opt,name=store_uuid,json=storeUuid,proto3" json:"store_uuid,omitempty"`
	UserPhoneNo   string                 `protobuf:"bytes,3,opt,name=user_phone_no,json=userPhoneNo,proto3" json:"user_phone_no,omitempty"`
	OrderNo       string                 `protobuf:"bytes,4,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOrderRequest) Reset() {
	*x = GetOrderRequest{}
	mi := &file_order_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderRequest) ProtoMessage() {}

func (x *GetOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderRequest.ProtoReflect.Descriptor instead.
func (*GetOrderRequest) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{16}
}

func (x *GetOrderRequest) GetOrderUuid() string {
	if x != nil {
		return x.OrderUuid
	}
	return ""
}

func (x *GetOrderRequest) GetStoreUuid() string {
	if x != nil {
		return x.StoreUuid
	}
	return ""
}

func (x *GetOrderRequest) GetUserPhoneNo() string {
	if x != nil {
		return x.UserPhoneNo
	}
	return ""
}

func (x *GetOrderRequest) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

type UpdateOrderStateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OrderUuid     string                 `protobuf:"bytes,1,opt,name=order_uuid,json=orderUuid,proto3" json:"order_uuid,omitempty"`
	StoreUuid     string                 `protobuf:"bytes,2,opt,name=store_uuid,json=storeUuid,proto3" json:"store_uuid,omitempty"`
	OrderState    OrderState             `protobuf:"varint,3,opt,name=order_state,json=orderState,proto3,enum=Order_v1.OrderState" json:"order_state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateOrderStateRequest) Reset() {
	*x = UpdateOrderStateRequest{}
	mi := &file_order_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateOrderStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrderStateRequest) ProtoMessage() {}

func (x *UpdateOrderStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrderStateRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrderStateRequest) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateOrderStateRequest) GetOrderUuid() string {
	if x != nil {
		return x.OrderUuid
	}
	return ""
}

func (x *UpdateOrderStateRequest) GetStoreUuid() string {
	if x != nil {
		return x.StoreUuid
	}
	return ""
}

func (x *UpdateOrderStateRequest) GetOrderState() OrderState {
	if x != nil {
		return x.OrderState
	}
	return OrderState_ORDER_STATE_UNSPECIFIED
}

type DeleteOrderRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OrderUuid     string                 `protobuf:"bytes,1,opt,name=order_uuid,json=orderUuid,proto3" json:"order_uuid,omitempty"`
	StoreUuid     string                 `protobuf:"bytes,2,opt,name=store_uuid,json=storeUuid,proto3" json:"store_uuid,omitempty"`
	UserPhoneNo   string                 `protobuf:"bytes,3,opt,name=user_phone_no,json=userPhoneNo,proto3" json:"user_phone_no,omitempty"`
	OrderNo       string                 `protobuf:"bytes,4,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteOrderRequest) Reset() {
	*x = DeleteOrderRequest{}
	mi := &file_order_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrderRequest) ProtoMessage() {}

func (x *DeleteOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrderRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrderRequest) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteOrderRequest) GetOrderUuid() string {
	if x != nil {
		return x.OrderUuid
	}
	return ""
}

func (x *DeleteOrderRequest) GetStoreUuid() string {
	if x != nil {
		return x.StoreUuid
	}
	return ""
}

func (x *DeleteOrderRequest) GetUserPhoneNo() string {
	if x != nil {
		return x.UserPhoneNo
	}
	return ""
}

func (x *DeleteOrderRequest) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

type CancelUserOrderRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StoreUuid     string                 `protobuf:"bytes,1,opt,name=store_uuid,json=storeUuid,proto3" json:"store_uuid,omitempty"`
	UserPhoneNo   string                 `protobuf:"bytes,2,opt,name=user_phone_no,json=userPhoneNo,proto3" json:"user_phone_no,omitempty"`
	OrderNo       string                 `protobuf:"bytes,3,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`
	OrderUuid     string                 `protobuf:"bytes,4,opt,name=order_uuid,json=orderUuid,proto3" json:"order_uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelUserOrderRequest) Reset() {
	*x = CancelUserOrderRequest{}
	mi := &file_order_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelUserOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelUserOrderRequest) ProtoMessage() {}

func (x *CancelUserOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelUserOrderRequest.ProtoReflect.Descriptor instead.
func (*CancelUserOrderRequest) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{19}
}

func (x *CancelUserOrderRequest) GetStoreUuid() string {
	if x != nil {
		return x.StoreUuid
	}
	return ""
}

func (x *CancelUserOrderRequest) GetUserPhoneNo() string {
	if x != nil {
		return x.UserPhoneNo
	}
	return ""
}

func (x *CancelUserOrderRequest) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *CancelUserOrderRequest) GetOrderUuid() string {
	if x != nil {
		return x.OrderUuid
	}
	return ""
}

type ListOrderRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StoreUuid     string                 `protobuf:"bytes,1,opt,name=store_uuid,json=storeUuid,proto3" json:"store_uuid,omitempty"`
	UserPhoneNo   string                 `protobuf:"bytes,2,opt,name=user_phone_no,json=userPhoneNo,proto3" json:"user_phone_no,omitempty"`
	Limit         int32                  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Page          int32                  `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListOrderRequest) Reset() {
	*x = ListOrderRequest{}
	mi := &file_order_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrderRequest) ProtoMessage() {}

func (x *ListOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrderRequest.ProtoReflect.Descriptor instead.
func (*ListOrderRequest) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{20}
}

func (x *ListOrderRequest) GetStoreUuid() string {
	if x != nil {
		return x.StoreUuid
	}
	return ""
}

func (x *ListOrderRequest) GetUserPhoneNo() string {
	if x != nil {
		return x.UserPhoneNo
	}
	return ""
}

func (x *ListOrderRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListOrderRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

type ListOrderResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Orders        []*OrderStoreView      `protobuf:"bytes,1,rep,name=orders,proto3" json:"orders,omitempty"`
	NextPage      int32                  `protobuf:"varint,2,opt,name=next_page,json=nextPage,proto3" json:"next_page,omitempty"`
	PrevPage      int32                  `protobuf:"varint,3,opt,name=prev_page,json=prevPage,proto3" json:"prev_page,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListOrderResponse) Reset() {
	*x = ListOrderResponse{}
	mi := &file_order_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrderResponse) ProtoMessage() {}

func (x *ListOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrderResponse.ProtoReflect.Descriptor instead.
func (*ListOrderResponse) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{21}
}

func (x *ListOrderResponse) GetOrders() []*OrderStoreView {
	if x != nil {
		return x.Orders
	}
	return nil
}

func (x *ListOrderResponse) GetNextPage() int32 {
	if x != nil {
		return x.NextPage
	}
	return 0
}

func (x *ListOrderResponse) GetPrevPage() int32 {
	if x != nil {
		return x.PrevPage
	}
	return 0
}

type Empty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_order_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{22}
}

type KafkaOrderMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CartUuid      string                 `protobuf:"bytes,1,opt,name=cart_uuid,json=cartUuid,proto3" json:"cart_uuid,omitempty"`
	StoreUuid     string                 `protobuf:"bytes,2,opt,name=store_uuid,json=storeUuid,proto3" json:"store_uuid,omitempty"`
	UserPhoneNo   string                 `protobuf:"bytes,3,opt,name=user_phone_no,json=userPhoneNo,proto3" json:"user_phone_no,omitempty"`
	Payment       *OrderPayment          `protobuf:"bytes,4,opt,name=payment,proto3" json:"payment,omitempty"`
	OrderStatus   OrderState             `protobuf:"varint,5,opt,name=order_status,json=orderStatus,proto3,enum=Order_v1.OrderState" json:"order_status,omitempty"`
	Operation     OrderOpration          `protobuf:"varint,6,opt,name=operation,proto3,enum=Order_v1.OrderOpration" json:"operation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KafkaOrderMessage) Reset() {
	*x = KafkaOrderMessage{}
	mi := &file_order_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KafkaOrderMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaOrderMessage) ProtoMessage() {}

func (x *KafkaOrderMessage) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaOrderMessage.ProtoReflect.Descriptor instead.
func (*KafkaOrderMessage) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{23}
}

func (x *KafkaOrderMessage) GetCartUuid() string {
	if x != nil {
		return x.CartUuid
	}
	return ""
}

func (x *KafkaOrderMessage) GetStoreUuid() string {
	if x != nil {
		return x.StoreUuid
	}
	return ""
}

func (x *KafkaOrderMessage) GetUserPhoneNo() string {
	if x != nil {
		return x.UserPhoneNo
	}
	return ""
}

func (x *KafkaOrderMessage) GetPayment() *OrderPayment {
	if x != nil {
		return x.Payment
	}
	return nil
}

func (x *KafkaOrderMessage) GetOrderStatus() OrderState {
	if x != nil {
		return x.OrderStatus
	}
	return OrderState_ORDER_STATE_UNSPECIFIED
}

func (x *KafkaOrderMessage) GetOperation() OrderOpration {
	if x != nil {
		return x.Operation
	}
	return OrderOpration_ORDER_OP_UNSPECIFIED
}

var File_order_proto protoreflect.FileDescriptor

var file_order_proto_rawDesc = string([]byte{
	0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe6, 0x07, 0x0a, 0x0e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x56, 0x69, 0x65, 0x77, 0x12, 0x1d,
	0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x6f, 0x12, 0x32, 0x0a, 0x0a, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x13, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x12, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x0a, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x29, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a,
	0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x31, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x54, 0x61, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x74, 0x61, 0x78, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0b, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x72, 0x74, 0x55, 0x75, 0x69, 0x64,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x6e, 0x6f, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0xdd, 0x07, 0x0a, 0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x72, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x6f,
	0x12, 0x32, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x31, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x6f,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x12,
	0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x6f, 0x12, 0x2f,
	0x0a, 0x13, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x76, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x31, 0x0a, 0x14, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x0e,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0d, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x3b, 0x0a, 0x0d,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x75,
	0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x54, 0x61, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x74, 0x61, 0x78, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x54, 0x61, 0x78, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x22, 0xa6, 0x04, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61, 0x78, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x74,
	0x61, 0x78, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x75, 0x6e,
	0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x5f, 0x6f, 0x6e, 0x73, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x4f,
	0x6e, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0e, 0x73, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x61, 0x78, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x54, 0x61, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x74, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x5f, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d,
	0x41, 0x64, 0x64, 0x4f, 0x6e, 0x52, 0x06, 0x61, 0x64, 0x64, 0x4f, 0x6e, 0x73, 0x22, 0xcd, 0x01,
	0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x64, 0x64, 0x4f, 0x6e,
	0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x5f, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x4f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x5f, 0x6f, 0x6e, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x4f, 0x6e, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x73, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73,
	0x46, 0x72, 0x65, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x73,
	0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc6, 0x03,
	0x0a, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x23, 0x0a, 0x0b, 0x72, 0x7a, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x72, 0x7a, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0d, 0x72, 0x7a, 0x5f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x0b, 0x72, 0x7a, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0c, 0x72, 0x7a, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x72, 0x7a, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x3d, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e,
	0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52,
	0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e,
	0x6f, 0x74, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x7a, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x7a, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x7a, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x74, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x6f, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x72, 0x74, 0x55, 0x75, 0x69, 0x64, 0x22, 0x92, 0x01, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e,
	0x6f, 0x22, 0x91, 0x01, 0x0a, 0x12, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x4e, 0x6f, 0x22, 0x84, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x22,
	0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x4e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x33, 0x0a, 0x12,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x75, 0x69,
	0x64, 0x22, 0x84, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x72, 0x65, 0x76, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x72, 0x65, 0x76, 0x50, 0x61, 0x67, 0x65, 0x22, 0x42, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x56, 0x69, 0x65, 0x77, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x44, 0x0a, 0x12,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x22, 0x83, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x6f, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x31, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x65, 0x77, 0x52, 0x06, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x50, 0x61, 0x67, 0x65, 0x22, 0x3f, 0x0a,
	0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e,
	0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x8e,
	0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x22, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x4e, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x22,
	0x8e, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x0b, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x22, 0x91, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x4e, 0x6f, 0x22, 0x95, 0x01, 0x0a, 0x16, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x22,
	0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x4e, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x1d, 0x0a,
	0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x22, 0x7f, 0x0a, 0x10,
	0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x22, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x4e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x7f, 0x0a,
	0x11, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x31, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52, 0x06, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x50, 0x61, 0x67, 0x65, 0x22, 0x07,
	0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x95, 0x02, 0x0a, 0x11, 0x4b, 0x61, 0x66, 0x6b,
	0x61, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x61, 0x72, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x61, 0x72, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x6f, 0x12, 0x30, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x37, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x31,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4f, 0x70, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2a,
	0xc9, 0x01, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b,
	0x0a, 0x17, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x41, 0x59, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x43,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12,
	0x15, 0x0a, 0x11, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52,
	0x45, 0x41, 0x44, 0x59, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10,
	0x05, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x2a, 0x9a, 0x01, 0x0a, 0x0c,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x19,
	0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x50,
	0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x45, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45,
	0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16,
	0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45,
	0x46, 0x55, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x04, 0x2a, 0xb5, 0x01, 0x0a, 0x0d, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x41,
	0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x41,
	0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x52, 0x41, 0x5a,
	0x4f, 0x52, 0x50, 0x41, 0x59, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x41, 0x59, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x43, 0x41, 0x53, 0x48, 0x10, 0x02,
	0x12, 0x17, 0x0a, 0x13, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48,
	0x4f, 0x44, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x41, 0x59,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x55, 0x50, 0x49, 0x10,
	0x04, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x54,
	0x48, 0x4f, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x42, 0x41, 0x4e, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x05,
	0x2a, 0x74, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x16, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x4e, 0x10,
	0x01, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x54, 0x41, 0x4b, 0x45, 0x5f, 0x41, 0x57, 0x41, 0x59, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x52, 0x49, 0x56, 0x45, 0x5f,
	0x54, 0x48, 0x52, 0x55, 0x10, 0x03, 0x2a, 0x53, 0x0a, 0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4f,
	0x70, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x4f, 0x50, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4f, 0x50, 0x5f, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x4f, 0x50, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x32, 0xd7, 0x09, 0x0a, 0x0c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6f, 0x0a, 0x0b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a,
	0x01, 0x2a, 0x22, 0x19, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x7b, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x88, 0x01,
	0x0a, 0x08, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x12, 0x3b, 0x2f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2f, 0x7b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d,
	0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x5f, 0x6e, 0x6f, 0x7d, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x7b, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x12, 0x98, 0x01, 0x0a, 0x0b, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x47, 0x3a, 0x01, 0x2a, 0x1a,
	0x42, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x7b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x7d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x6f, 0x7d, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f,
	0x7b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x12, 0x72, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x1f, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x12, 0x1a, 0x2f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2f, 0x7b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d,
	0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x76, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2f, 0x7b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d,
	0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x30, 0x01, 0x12,
	0x86, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a,
	0x1a, 0x26, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x7b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x7b, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x12, 0x8f, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x12, 0x3b, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x5f, 0x6e, 0x6f, 0x7d, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x7b, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x7b, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x12, 0x89, 0x01, 0x0a, 0x0d, 0x6c,
	0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x31, 0x12, 0x2f, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x7b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x6f, 0x7d, 0x2f, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2f, 0x7b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x9c, 0x01, 0x0a, 0x0f, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x44, 0x12, 0x42, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x7b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x6f, 0x7d, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x7b,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2f, 0x7b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x7d, 0x2f, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42, 0x0e, 0x5a, 0x0c, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3b,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_order_proto_rawDescOnce sync.Once
	file_order_proto_rawDescData []byte
)

func file_order_proto_rawDescGZIP() []byte {
	file_order_proto_rawDescOnce.Do(func() {
		file_order_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_order_proto_rawDesc), len(file_order_proto_rawDesc)))
	})
	return file_order_proto_rawDescData
}

var file_order_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_order_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_order_proto_goTypes = []any{
	(OrderState)(0),                 // 0: Order_v1.OrderState
	(PaymentState)(0),               // 1: Order_v1.PaymentState
	(PaymentMethod)(0),              // 2: Order_v1.PaymentMethod
	(OrderType)(0),                  // 3: Order_v1.OrderType
	(OrderOpration)(0),              // 4: Order_v1.OrderOpration
	(*OrderStoreView)(nil),          // 5: Order_v1.OrderStoreView
	(*OrderUserView)(nil),           // 6: Order_v1.OrderUserView
	(*OrderItem)(nil),               // 7: Order_v1.OrderItem
	(*OrderItemAddOn)(nil),          // 8: Order_v1.OrderItemAddOn
	(*OrderPayment)(nil),            // 9: Order_v1.OrderPayment
	(*CreateOrderRequest)(nil),      // 10: Order_v1.CreateOrderRequest
	(*GetUserOrderRequest)(nil),     // 11: Order_v1.GetUserOrderRequest
	(*CancelOrderRequest)(nil),      // 12: Order_v1.CancelOrderRequest
	(*ListStoreOrderRequest)(nil),   // 13: Order_v1.ListStoreOrderRequest
	(*StreamOrderRequest)(nil),      // 14: Order_v1.StreamOrderRequest
	(*ListStoreOrderResponse)(nil),  // 15: Order_v1.ListStoreOrderResponse
	(*UserOrderResponse)(nil),       // 16: Order_v1.UserOrderResponse
	(*StoreOrderResponse)(nil),      // 17: Order_v1.StoreOrderResponse
	(*ListUserOrderRequest)(nil),    // 18: Order_v1.ListUserOrderRequest
	(*ListUserOrderResponse)(nil),   // 19: Order_v1.ListUserOrderResponse
	(*OrderResponse)(nil),           // 20: Order_v1.OrderResponse
	(*GetOrderRequest)(nil),         // 21: Order_v1.GetOrderRequest
	(*UpdateOrderStateRequest)(nil), // 22: Order_v1.UpdateOrderStateRequest
	(*DeleteOrderRequest)(nil),      // 23: Order_v1.DeleteOrderRequest
	(*CancelUserOrderRequest)(nil),  // 24: Order_v1.CancelUserOrderRequest
	(*ListOrderRequest)(nil),        // 25: Order_v1.ListOrderRequest
	(*ListOrderResponse)(nil),       // 26: Order_v1.ListOrderResponse
	(*Empty)(nil),                   // 27: Order_v1.Empty
	(*KafkaOrderMessage)(nil),       // 28: Order_v1.KafkaOrderMessage
	(*timestamppb.Timestamp)(nil),   // 29: google.protobuf.Timestamp
}
var file_order_proto_depIdxs = []int32{
	3,  // 0: Order_v1.OrderStoreView.order_type:type_name -> Order_v1.OrderType
	7,  // 1: Order_v1.OrderStoreView.items:type_name -> Order_v1.OrderItem
	0,  // 2: Order_v1.OrderStoreView.order_status:type_name -> Order_v1.OrderState
	9,  // 3: Order_v1.OrderStoreView.payment:type_name -> Order_v1.OrderPayment
	29, // 4: Order_v1.OrderStoreView.created_at:type_name -> google.protobuf.Timestamp
	29, // 5: Order_v1.OrderStoreView.updated_at:type_name -> google.protobuf.Timestamp
	3,  // 6: Order_v1.OrderUserView.order_type:type_name -> Order_v1.OrderType
	0,  // 7: Order_v1.OrderUserView.order_status:type_name -> Order_v1.OrderState
	2,  // 8: Order_v1.OrderUserView.payment_method:type_name -> Order_v1.PaymentMethod
	1,  // 9: Order_v1.OrderUserView.payment_state:type_name -> Order_v1.PaymentState
	7,  // 10: Order_v1.OrderUserView.items:type_name -> Order_v1.OrderItem
	29, // 11: Order_v1.OrderUserView.created_at:type_name -> google.protobuf.Timestamp
	29, // 12: Order_v1.OrderUserView.updated_at:type_name -> google.protobuf.Timestamp
	8,  // 13: Order_v1.OrderItem.add_ons:type_name -> Order_v1.OrderItemAddOn
	1,  // 14: Order_v1.OrderPayment.payment_status:type_name -> Order_v1.PaymentState
	2,  // 15: Order_v1.OrderPayment.payment_method:type_name -> Order_v1.PaymentMethod
	29, // 16: Order_v1.OrderPayment.payment_time:type_name -> google.protobuf.Timestamp
	5,  // 17: Order_v1.ListStoreOrderResponse.orders:type_name -> Order_v1.OrderStoreView
	6,  // 18: Order_v1.UserOrderResponse.order:type_name -> Order_v1.OrderUserView
	5,  // 19: Order_v1.StoreOrderResponse.order:type_name -> Order_v1.OrderStoreView
	6,  // 20: Order_v1.ListUserOrderResponse.orders:type_name -> Order_v1.OrderUserView
	5,  // 21: Order_v1.OrderResponse.order:type_name -> Order_v1.OrderStoreView
	0,  // 22: Order_v1.UpdateOrderStateRequest.order_state:type_name -> Order_v1.OrderState
	5,  // 23: Order_v1.ListOrderResponse.orders:type_name -> Order_v1.OrderStoreView
	9,  // 24: Order_v1.KafkaOrderMessage.payment:type_name -> Order_v1.OrderPayment
	0,  // 25: Order_v1.KafkaOrderMessage.order_status:type_name -> Order_v1.OrderState
	4,  // 26: Order_v1.KafkaOrderMessage.operation:type_name -> Order_v1.OrderOpration
	10, // 27: Order_v1.OrderService.CreateOrder:input_type -> Order_v1.CreateOrderRequest
	21, // 28: Order_v1.OrderService.GetOrder:input_type -> Order_v1.GetOrderRequest
	12, // 29: Order_v1.OrderService.CancelOrder:input_type -> Order_v1.CancelOrderRequest
	13, // 30: Order_v1.OrderService.ListOrder:input_type -> Order_v1.ListStoreOrderRequest
	14, // 31: Order_v1.OrderService.StreamOrders:input_type -> Order_v1.StreamOrderRequest
	22, // 32: Order_v1.OrderService.UpdateOrderState:input_type -> Order_v1.UpdateOrderStateRequest
	11, // 33: Order_v1.OrderService.GetUserOrder:input_type -> Order_v1.GetUserOrderRequest
	18, // 34: Order_v1.OrderService.listUserOrder:input_type -> Order_v1.ListUserOrderRequest
	24, // 35: Order_v1.OrderService.CancelUserOrder:input_type -> Order_v1.CancelUserOrderRequest
	17, // 36: Order_v1.OrderService.CreateOrder:output_type -> Order_v1.StoreOrderResponse
	17, // 37: Order_v1.OrderService.GetOrder:output_type -> Order_v1.StoreOrderResponse
	17, // 38: Order_v1.OrderService.CancelOrder:output_type -> Order_v1.StoreOrderResponse
	15, // 39: Order_v1.OrderService.ListOrder:output_type -> Order_v1.ListStoreOrderResponse
	17, // 40: Order_v1.OrderService.StreamOrders:output_type -> Order_v1.StoreOrderResponse
	17, // 41: Order_v1.OrderService.UpdateOrderState:output_type -> Order_v1.StoreOrderResponse
	16, // 42: Order_v1.OrderService.GetUserOrder:output_type -> Order_v1.UserOrderResponse
	19, // 43: Order_v1.OrderService.listUserOrder:output_type -> Order_v1.ListUserOrderResponse
	16, // 44: Order_v1.OrderService.CancelUserOrder:output_type -> Order_v1.UserOrderResponse
	36, // [36:45] is the sub-list for method output_type
	27, // [27:36] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_order_proto_init() }
func file_order_proto_init() {
	if File_order_proto != nil {
		return
	}
	file_order_proto_msgTypes[0].OneofWrappers = []any{}
	file_order_proto_msgTypes[4].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_order_proto_rawDesc), len(file_order_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_order_proto_goTypes,
		DependencyIndexes: file_order_proto_depIdxs,
		EnumInfos:         file_order_proto_enumTypes,
		MessageInfos:      file_order_proto_msgTypes,
	}.Build()
	File_order_proto = out.File
	file_order_proto_goTypes = nil
	file_order_proto_depIdxs = nil
}
