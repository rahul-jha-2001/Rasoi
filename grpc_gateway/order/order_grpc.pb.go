// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: order.proto

package order

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OrderService_CreateOrder_FullMethodName      = "/Order_v1.OrderService/CreateOrder"
	OrderService_GetOrder_FullMethodName         = "/Order_v1.OrderService/GetOrder"
	OrderService_CancelOrder_FullMethodName      = "/Order_v1.OrderService/CancelOrder"
	OrderService_ListOrder_FullMethodName        = "/Order_v1.OrderService/ListOrder"
	OrderService_StreamOrders_FullMethodName     = "/Order_v1.OrderService/StreamOrders"
	OrderService_UpdateOrderState_FullMethodName = "/Order_v1.OrderService/UpdateOrderState"
	OrderService_GetUserOrder_FullMethodName     = "/Order_v1.OrderService/GetUserOrder"
	OrderService_ListUserOrder_FullMethodName    = "/Order_v1.OrderService/listUserOrder"
	OrderService_CancelUserOrder_FullMethodName  = "/Order_v1.OrderService/CancelUserOrder"
)

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service Definition
type OrderServiceClient interface {
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*StoreOrderResponse, error)
	GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*StoreOrderResponse, error)
	CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*StoreOrderResponse, error)
	ListOrder(ctx context.Context, in *ListStoreOrderRequest, opts ...grpc.CallOption) (*ListStoreOrderResponse, error)
	StreamOrders(ctx context.Context, in *StreamOrderRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StoreOrderResponse], error)
	UpdateOrderState(ctx context.Context, in *UpdateOrderStateRequest, opts ...grpc.CallOption) (*StoreOrderResponse, error)
	GetUserOrder(ctx context.Context, in *GetUserOrderRequest, opts ...grpc.CallOption) (*UserOrderResponse, error)
	ListUserOrder(ctx context.Context, in *ListUserOrderRequest, opts ...grpc.CallOption) (*ListUserOrderResponse, error)
	CancelUserOrder(ctx context.Context, in *CancelUserOrderRequest, opts ...grpc.CallOption) (*UserOrderResponse, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*StoreOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreOrderResponse)
	err := c.cc.Invoke(ctx, OrderService_CreateOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*StoreOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreOrderResponse)
	err := c.cc.Invoke(ctx, OrderService_GetOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*StoreOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreOrderResponse)
	err := c.cc.Invoke(ctx, OrderService_CancelOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) ListOrder(ctx context.Context, in *ListStoreOrderRequest, opts ...grpc.CallOption) (*ListStoreOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStoreOrderResponse)
	err := c.cc.Invoke(ctx, OrderService_ListOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) StreamOrders(ctx context.Context, in *StreamOrderRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StoreOrderResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OrderService_ServiceDesc.Streams[0], OrderService_StreamOrders_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamOrderRequest, StoreOrderResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OrderService_StreamOrdersClient = grpc.ServerStreamingClient[StoreOrderResponse]

func (c *orderServiceClient) UpdateOrderState(ctx context.Context, in *UpdateOrderStateRequest, opts ...grpc.CallOption) (*StoreOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreOrderResponse)
	err := c.cc.Invoke(ctx, OrderService_UpdateOrderState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) GetUserOrder(ctx context.Context, in *GetUserOrderRequest, opts ...grpc.CallOption) (*UserOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserOrderResponse)
	err := c.cc.Invoke(ctx, OrderService_GetUserOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) ListUserOrder(ctx context.Context, in *ListUserOrderRequest, opts ...grpc.CallOption) (*ListUserOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserOrderResponse)
	err := c.cc.Invoke(ctx, OrderService_ListUserOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) CancelUserOrder(ctx context.Context, in *CancelUserOrderRequest, opts ...grpc.CallOption) (*UserOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserOrderResponse)
	err := c.cc.Invoke(ctx, OrderService_CancelUserOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServiceServer is the server API for OrderService service.
// All implementations must embed UnimplementedOrderServiceServer
// for forward compatibility.
//
// Service Definition
type OrderServiceServer interface {
	CreateOrder(context.Context, *CreateOrderRequest) (*StoreOrderResponse, error)
	GetOrder(context.Context, *GetOrderRequest) (*StoreOrderResponse, error)
	CancelOrder(context.Context, *CancelOrderRequest) (*StoreOrderResponse, error)
	ListOrder(context.Context, *ListStoreOrderRequest) (*ListStoreOrderResponse, error)
	StreamOrders(*StreamOrderRequest, grpc.ServerStreamingServer[StoreOrderResponse]) error
	UpdateOrderState(context.Context, *UpdateOrderStateRequest) (*StoreOrderResponse, error)
	GetUserOrder(context.Context, *GetUserOrderRequest) (*UserOrderResponse, error)
	ListUserOrder(context.Context, *ListUserOrderRequest) (*ListUserOrderResponse, error)
	CancelUserOrder(context.Context, *CancelUserOrderRequest) (*UserOrderResponse, error)
	mustEmbedUnimplementedOrderServiceServer()
}

// UnimplementedOrderServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrderServiceServer struct{}

func (UnimplementedOrderServiceServer) CreateOrder(context.Context, *CreateOrderRequest) (*StoreOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedOrderServiceServer) GetOrder(context.Context, *GetOrderRequest) (*StoreOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedOrderServiceServer) CancelOrder(context.Context, *CancelOrderRequest) (*StoreOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (UnimplementedOrderServiceServer) ListOrder(context.Context, *ListStoreOrderRequest) (*ListStoreOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrder not implemented")
}
func (UnimplementedOrderServiceServer) StreamOrders(*StreamOrderRequest, grpc.ServerStreamingServer[StoreOrderResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamOrders not implemented")
}
func (UnimplementedOrderServiceServer) UpdateOrderState(context.Context, *UpdateOrderStateRequest) (*StoreOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderState not implemented")
}
func (UnimplementedOrderServiceServer) GetUserOrder(context.Context, *GetUserOrderRequest) (*UserOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserOrder not implemented")
}
func (UnimplementedOrderServiceServer) ListUserOrder(context.Context, *ListUserOrderRequest) (*ListUserOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserOrder not implemented")
}
func (UnimplementedOrderServiceServer) CancelUserOrder(context.Context, *CancelUserOrderRequest) (*UserOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelUserOrder not implemented")
}
func (UnimplementedOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {}
func (UnimplementedOrderServiceServer) testEmbeddedByValue()                      {}

// UnsafeOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceServer will
// result in compilation errors.
type UnsafeOrderServiceServer interface {
	mustEmbedUnimplementedOrderServiceServer()
}

func RegisterOrderServiceServer(s grpc.ServiceRegistrar, srv OrderServiceServer) {
	// If the following call pancis, it indicates UnimplementedOrderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OrderService_ServiceDesc, srv)
}

func _OrderService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_CreateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrder(ctx, req.(*GetOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_CancelOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CancelOrder(ctx, req.(*CancelOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_ListOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStoreOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).ListOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_ListOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).ListOrder(ctx, req.(*ListStoreOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_StreamOrders_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamOrderRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrderServiceServer).StreamOrders(m, &grpc.GenericServerStream[StreamOrderRequest, StoreOrderResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OrderService_StreamOrdersServer = grpc.ServerStreamingServer[StoreOrderResponse]

func _OrderService_UpdateOrderState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).UpdateOrderState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_UpdateOrderState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).UpdateOrderState(ctx, req.(*UpdateOrderStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_GetUserOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetUserOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_GetUserOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetUserOrder(ctx, req.(*GetUserOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_ListUserOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).ListUserOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_ListUserOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).ListUserOrder(ctx, req.(*ListUserOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_CancelUserOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelUserOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CancelUserOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderService_CancelUserOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CancelUserOrder(ctx, req.(*CancelUserOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderService_ServiceDesc is the grpc.ServiceDesc for OrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Order_v1.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrder",
			Handler:    _OrderService_CreateOrder_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _OrderService_GetOrder_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _OrderService_CancelOrder_Handler,
		},
		{
			MethodName: "ListOrder",
			Handler:    _OrderService_ListOrder_Handler,
		},
		{
			MethodName: "UpdateOrderState",
			Handler:    _OrderService_UpdateOrderState_Handler,
		},
		{
			MethodName: "GetUserOrder",
			Handler:    _OrderService_GetUserOrder_Handler,
		},
		{
			MethodName: "listUserOrder",
			Handler:    _OrderService_ListUserOrder_Handler,
		},
		{
			MethodName: "CancelUserOrder",
			Handler:    _OrderService_CancelUserOrder_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamOrders",
			Handler:       _OrderService_StreamOrders_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "order.proto",
}
